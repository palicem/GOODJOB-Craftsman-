"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.search = exports.SearchService = void 0;
const abstractService_1 = require("../abstractService");
const types_1 = require("./types");
const pathname_1 = require("./pathname");
const backend_1 = require("./backend");
class SearchService extends abstractService_1.AbstractService {
    encodeSearchRequest(data, rest) {
        return Object.assign(Object.assign({}, data), (this.isCollectionNameRequest(rest)
            ? { collection_name: rest.CollectionName }
            : { collection_alias: rest.CollectionAlias }));
    }
    encodeMustTypeFilter({ FieldName, Operation, Conditions, }) {
        return {
            op: Operation,
            field: FieldName,
            conds: Conditions,
        };
    }
    encodeRangeTypeFilter(filter) {
        if ("FieldName" in filter) {
            return {
                field: filter.FieldName,
                op: filter.Operation,
                lt: filter.LessThen,
                lte: filter.LessThenEqual,
                gt: filter.GreatThen,
                gte: filter.GreatThenEqual,
            };
        }
        else {
            return {
                field: filter.FieldNames,
                op: filter.Operation,
                center: filter.Center,
                radius: filter.Radius,
            };
        }
    }
    encodeGeographicalRangeTypeFilter(filter) {
        return {
            op: filter.Operation,
            center: filter.Center,
            field: filter.FieldNames,
            radius: filter.Radius,
        };
    }
    encodeLogicTypeFilter({ Operation, Conditions, }) {
        return {
            op: Operation,
            conds: Conditions.map((filter) => this.encodeFilter(filter), this),
        };
    }
    encodeFilter(filter) {
        switch (filter.Operation) {
            case backend_1.SearchOperation.Must:
            case backend_1.SearchOperation.MustNot:
                return this.encodeMustTypeFilter(filter);
            case backend_1.SearchOperation.Range:
            case backend_1.SearchOperation.RangeOut:
                return this.encodeRangeTypeFilter(filter);
            case backend_1.SearchOperation.GeographicalRange:
                return this.encodeGeographicalRangeTypeFilter(filter);
            default:
                return this.encodeLogicTypeFilter(filter);
        }
    }
    async decodeSearchData(request) {
        const response = await this.request(pathname_1.Pathname.Search, request);
        return new types_1.SearchResponse(response.data.map((item) => item.map((_a) => {
            var { score, fields } = _a, rest = __rest(_a, ["score", "fields"]);
            return (Object.assign({ Score: score, Fields: fields }, rest));
        })), response.original_request, response.request_id);
    }
    async SearchByVector(_a) {
        var { IndexName, DenseWeight, Filter, Limit, OutputFields, Partition, DenseVectors, SparseVectors, PrimaryKeyIn, PrimaryKeyNotIn } = _a, rest = __rest(_a, ["IndexName", "DenseWeight", "Filter", "Limit", "OutputFields", "Partition", "DenseVectors", "SparseVectors", "PrimaryKeyIn", "PrimaryKeyNotIn"]);
        const request = this.encodeSearchRequest({
            index_name: IndexName,
            search: {
                limit: Limit,
                dense_weight: DenseWeight,
                order_by_vector: {
                    vectors: DenseVectors,
                    sparse_vectors: SparseVectors,
                },
                partition: Partition,
                output_fields: OutputFields,
            },
        }, rest);
        if (!this.isNil(Filter)) {
            request.search.filter = this.encodeFilter(Filter);
        }
        if (!this.isNil(PrimaryKeyIn)) {
            request.search.primary_key_in = PrimaryKeyIn;
        }
        if (!this.isNil(PrimaryKeyNotIn)) {
            request.search.primary_key_not_in = PrimaryKeyNotIn;
        }
        return this.decodeSearchData(request);
    }
    async SearchByPrimaryKeys(_a) {
        var { IndexName, DenseWeight, Filter, Limit, Partition, OutputFields, PrimaryKeys } = _a, rest = __rest(_a, ["IndexName", "DenseWeight", "Filter", "Limit", "Partition", "OutputFields", "PrimaryKeys"]);
        const request = this.encodeSearchRequest({
            index_name: IndexName,
            search: {
                limit: Limit,
                dense_weight: DenseWeight,
                order_by_vector: {
                    primary_keys: PrimaryKeys,
                },
                partition: Partition,
                output_fields: OutputFields,
            },
        }, rest);
        if (!this.isNil(Filter)) {
            request.search.filter = this.encodeFilter(Filter);
        }
        return this.decodeSearchData(request);
    }
    async SearchByText(_a) {
        var { DenseWeight, Filter, IndexName, Limit, OutputFields, Partition, Text } = _a, rest = __rest(_a, ["DenseWeight", "Filter", "IndexName", "Limit", "OutputFields", "Partition", "Text"]);
        const request = this.encodeSearchRequest({
            index_name: IndexName,
            search: {
                limit: Limit,
                dense_weight: DenseWeight,
                order_by_raw: {
                    text: Text,
                },
                partition: Partition,
                output_fields: OutputFields,
            },
        }, rest);
        if (!this.isNil(Filter)) {
            request.search.filter = this.encodeFilter(Filter);
        }
        return this.decodeSearchData(request);
    }
    async SearchByScalar(_a) {
        var { Filter, Partition, OutputFields, Limit, IndexName, ScalarConfig } = _a, rest = __rest(_a, ["Filter", "Partition", "OutputFields", "Limit", "IndexName", "ScalarConfig"]);
        const request = this.encodeSearchRequest({
            index_name: IndexName,
            search: {
                limit: Limit,
                partition: Partition,
                output_fields: OutputFields,
            },
        }, rest);
        if (!this.isNil(ScalarConfig)) {
            request.search.order_by_scalar = {
                order: ScalarConfig.Order,
                field_name: ScalarConfig.FieldName,
            };
        }
        if (!this.isNil(Filter)) {
            request.search.filter = this.encodeFilter(Filter);
        }
        return this.decodeSearchData(request);
    }
    async SearchAgg(_a) {
        var { IndexName, Search, Agg } = _a, rest = __rest(_a, ["IndexName", "Search", "Agg"]);
        const request = this.isCollectionNameRequest(rest)
            ? {
                collection_name: rest.CollectionName,
                index_name: IndexName,
                agg: Agg,
            }
            : {
                collection_alias: rest.CollectionAlias,
                index_name: IndexName,
                agg: Agg,
            };
        if (!this.isNil(Search)) {
            request.search = Search;
        }
        const response = await this.request(pathname_1.Pathname.Search, request);
        return new types_1.SearchAggResponse(response.data, response.original_request, response.request_id);
    }
}
exports.SearchService = SearchService;
exports.search = __importStar(require("./types"));
//# sourceMappingURL=index.js.map