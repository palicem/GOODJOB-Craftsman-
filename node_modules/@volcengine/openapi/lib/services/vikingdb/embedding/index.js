"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.embedding = exports.EmbeddingService = void 0;
const abstractService_1 = require("../abstractService");
const types_1 = require("./types");
const pathname_1 = require("./pathname");
const backend_1 = require("./backend");
class EmbeddingService extends abstractService_1.AbstractService {
    async Embedding({ ModelName, ReturnTokenUsage, ReturnSparse, ReturnDense }, dataParams) {
        const request = {
            model: {
                model_name: ModelName,
                params: {
                    return_dense: ReturnDense,
                    return_sparse: ReturnSparse,
                    return_token_usage: ReturnTokenUsage,
                },
            },
            data: dataParams.map((item) => {
                if (item.DataType === backend_1.DataType.Text) {
                    return {
                        data_type: item.DataType,
                        text: item.Text,
                    };
                }
                if (item.DataType === backend_1.DataType.Image) {
                    return {
                        data_type: item.DataType,
                        image: item.Image,
                    };
                }
                return {
                    data_type: item.DataType,
                    text: item.Text,
                    image: item.Image,
                };
            }),
        };
        const response = await this.request(pathname_1.Pathname.Embedding, request);
        const { sentence_dense_embedding, sentence_sparse_embedding, token_usage } = response.data;
        const result = {};
        if (ReturnDense && sentence_dense_embedding) {
            result.SentenceDenseEmbedding = sentence_dense_embedding;
        }
        if (ReturnSparse && sentence_sparse_embedding) {
            result.SentenceSparseEmbedding = sentence_sparse_embedding;
        }
        if (ReturnTokenUsage && token_usage) {
            result.TokenUsage = {
                TotalTokens: token_usage.total_tokens,
                CompletionTokens: token_usage.completion_tokens,
                PromptTokens: token_usage.prompt_tokens,
            };
        }
        return new types_1.EmbeddingResponse(result, response.original_request, response.request_id);
    }
}
exports.EmbeddingService = EmbeddingService;
exports.embedding = __importStar(require("./types"));
//# sourceMappingURL=index.js.map