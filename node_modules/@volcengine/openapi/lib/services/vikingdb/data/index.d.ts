import { AbstractService } from "../abstractService";
import { type DeleteDataRequest, type FetchCollectionDataRequest, FetchCollectionDataResponse, type FetchIndexDataRequest, FetchIndexDataResponse, UpdateDataRequest, type UpsertDataRequest } from "./types";
import { type GetPrimaryKeys, VikingdbResponse } from "../types";
export declare class DataService extends AbstractService {
    UpsertData({ Fields, TTL, Async, ...rest }: UpsertDataRequest): Promise<VikingdbResponse>;
    DeleteData(request: DeleteDataRequest): Promise<VikingdbResponse>;
    UpdateData({ Fields, TTL, ...rest }: UpdateDataRequest): Promise<VikingdbResponse>;
    FetchCollectionData<Data extends Record<string, any>, PrimaryKey extends GetPrimaryKeys<Data>>({ PrimaryKeys, ...rest }: FetchCollectionDataRequest): Promise<FetchCollectionDataResponse<Data, PrimaryKey>>;
    FetchIndexData<Data extends Record<string, any>, PrimaryKey extends GetPrimaryKeys<Data>>({ IndexName, PrimaryKeys, OutputFields, Partition, ...rest }: FetchIndexDataRequest): Promise<FetchIndexDataResponse<Data, PrimaryKey>>;
}
export * as data from "./types";
