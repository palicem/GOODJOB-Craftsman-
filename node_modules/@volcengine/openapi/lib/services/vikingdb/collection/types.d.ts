import { VikingdbResponse } from "../types";
import type { FieldInfo } from "../types";
export type VectorizeMap = {
    text_field?: string;
    image_field?: string;
    dim?: number;
    model_name?: string;
    model_version?: string;
};
export interface CollectionVectorize {
    dense?: VectorizeMap;
    sparse?: VectorizeMap;
}
export type Vectorize = CollectionVectorize | CollectionVectorize[];
export interface CreateCollectionRequest {
    CollectionName: string;
    Description?: string;
    CollectionAliases?: string[];
    Fields: FieldInfo[];
    Vectorize?: Vectorize;
}
interface GetCollectionInfoByCollectionNameRequest {
    CollectionName: string;
}
interface GetCollectionInfoByCollectionAliasesRequest {
    CollectionAlias: string;
}
export type GetCollectionInfoRequest = GetCollectionInfoByCollectionAliasesRequest | GetCollectionInfoByCollectionNameRequest;
export interface Stat {
    DataNumber: number;
}
export interface CollectionInfo {
    CollectionName: string;
    Description?: string;
    CollectionAliases?: string[];
    Fields: FieldInfo[];
    Stat: Stat;
    IndexNames: string[];
    IndexNumber: number;
    CreateTime: string;
    UpdateTime: string;
    UpdatePerson: string;
}
export declare class GetCollectionInfoResponse extends VikingdbResponse {
    readonly CollectionInfo: CollectionInfo;
    constructor(CollectionInfo: CollectionInfo, OriginalRequest: string, LogId: string);
}
export declare class ListCollectionsResponse extends VikingdbResponse {
    readonly ListCollections: CollectionInfo[];
    constructor(ListCollections: CollectionInfo[], OriginalRequest: string, LogId: string);
}
export type UpdateCollectionRequest = CreateCollectionRequest;
interface DropCollectionByCollectionNameRequest {
    CollectionName: string;
}
interface DropCollectionByCollectionAliasRequest {
    CollectionAlias: string;
}
export type DropCollectionRequest = DropCollectionByCollectionNameRequest | DropCollectionByCollectionAliasRequest;
export {};
