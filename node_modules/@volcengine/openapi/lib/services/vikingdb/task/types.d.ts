import { type RequestOptions, VikingdbResponse } from "../types";
import { BackendCreateTaskData, BackendGetTaskInfoData, TaskParams } from "./backend";
export declare class TaskResponse<T> extends VikingdbResponse {
    readonly Data: T;
    constructor(Data: T, OriginalRequest: string, LogId: string);
}
export interface Options<T> extends Omit<RequestOptions, "method"> {
    data: T;
    pathname: string;
}
export interface CreateTaskRequest {
    TaskType: string;
    TaskParams: TaskParams;
}
export declare class CreateTaskResponse extends VikingdbResponse {
    Data: BackendCreateTaskData;
    constructor(Data: BackendCreateTaskData, OriginalRequest: string, LogId: string);
}
export interface UpdateTaskRequest {
    TaskType: string;
    TaskStatus: string;
}
export interface GetTaskInfoRequest {
    TaskId: string;
}
export declare class GetTaskInfoResponse extends VikingdbResponse {
    Data: BackendGetTaskInfoData;
    constructor(Data: BackendGetTaskInfoData, OriginalRequest: string, LogId: string);
}
