import { type RequestOptions, VikingdbErrorCode, type VikingdbRegion } from "./types";
interface BackendResponse<T> {
    code: VikingdbErrorCode;
    request_id: string;
    data: T;
    message: string;
}
export interface Response<T> extends BackendResponse<T> {
    original_request: string;
}
export declare abstract class AbstractService {
    private ak;
    private sk;
    private region;
    private sessionToken?;
    private region2Url;
    private get basename();
    constructor(ak: string, sk: string, region: VikingdbRegion, sessionToken?: string | undefined);
    private sign;
    protected request<T extends NonNullable<unknown>, R = void>(pathname: string, data?: T, { timeout, ...rest }?: RequestOptions): Promise<Response<R>>;
    protected encode(value: unknown): string;
    protected decode<T>(input: string): T;
    protected isString(value: unknown): value is string;
    protected isNil(value: unknown): value is null | undefined;
    protected isCollectionNameRequest<T extends {
        CollectionName: string;
    }>(request: NonNullable<unknown>): request is T;
}
export {};
