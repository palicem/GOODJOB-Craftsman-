"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
class Logger {
    constructor(config) {
        const { namespace } = config;
        this._namespace = namespace;
        this._logLevel = this.getLogLevel();
    }
    error(msg, params = {}) {
        if (LogLevel.ERROR < this._logLevel)
            return;
        const logMsg = this._formatLog(msg, params, { logType: "ERROR" });
        this._print(logMsg);
    }
    warn(msg, params = {}) {
        if (LogLevel.WARN < this._logLevel)
            return;
        const logMsg = this._formatLog(msg, params, { logType: "WARN" });
        this._print(logMsg);
    }
    info(msg, params = {}) {
        if (LogLevel.INFO < this._logLevel)
            return;
        const logMsg = this._formatLog(msg, params, { logType: "INFO" });
        this._print(logMsg);
    }
    debug(msg, params = {}) {
        if (LogLevel.DEBUG < this._logLevel)
            return;
        const logMsg = this._formatLog(msg, params, { logType: "DEBUG" });
        this._print(logMsg);
    }
    _formatLog(msg, params, config) {
        const { logType } = config;
        const { timeSpent, payload } = params;
        const timeNow = (0, dayjs_1.default)().format("YYYY-MM-DD HH:mm:ss");
        const msgList = [timeNow, logType, `[${this._namespace}]`];
        if (msg)
            msgList.push(msg);
        if (timeSpent !== undefined)
            msgList.push(`${timeSpent}ms`);
        if (payload)
            msgList.push(JSON.stringify(payload));
        return msgList.join("\t");
    }
    _print(msg) {
        console.log(msg); // eslint-disable-line
    }
    getLogLevel() {
        const level = Number(process.env.MQ_LOG_LEVEL);
        if (Number.isNaN(level)) {
            return LogLevel.INFO;
        }
        if (level < LogLevel.DEBUG || level > LogLevel.ERROR) {
            return LogLevel.INFO;
        }
        return level;
    }
}
exports.default = Logger;
//# sourceMappingURL=logger.js.map