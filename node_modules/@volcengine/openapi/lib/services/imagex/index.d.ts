/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { AxiosRequestConfig } from "axios";
import { ServiceOptions, OpenApiResponse, SecurityToken2 } from "../../base/types";
import { GetUploadAuthParams, GetUploadAuthTokenParams, UploadPutResult } from "./types";
import { ApplyImageUploadQuery, ApplyImageUploadRes, CommitImageUploadBody, CommitImageUploadQuery, CommitImageUploadRes } from "./type";
import ImagexAutoService from "./client";
export declare class ImagexService extends ImagexAutoService {
    constructor(options?: ServiceOptions);
    UploadImages: (params: {
        ApplyParams: ApplyImageUploadQuery & {
            requestOptions?: AxiosRequestConfig;
        };
        CommitParams?: CommitImageUploadQuery & CommitImageUploadBody & {
            requestOptions?: AxiosRequestConfig;
        };
        SkipCommit?: boolean;
        ShowDuration?: boolean;
        ContentTypes?: string[];
        StorageClasses?: string[];
    }, files: string[] | NodeJS.ReadableStream[] | ArrayBuffer[] | ArrayBufferView[], enableChunkUpload?: boolean) => Promise<OpenApiResponse<CommitImageUploadRes["Result"]>>;
    DoUpload: (files: string[] | NodeJS.ReadableStream[] | ArrayBuffer[] | ArrayBufferView[], uploadHost: string, storeInfos: ApplyImageUploadRes["Result"]["UploadAddress"]["StoreInfos"], fileContentTypes?: string[], fileStorageClasses?: string[], chunkUpload?: boolean) => Promise<UploadPutResult[]>;
    private chunkUpload;
    private createUploadTask;
    private initUploadPart;
    private uploadPart;
    private uploadMergePart;
    private generateMergeBody;
    private directUpload;
    /**
     * 获取上传临时密钥, 默认超时时间为 1h
     */
    GetUploadAuth: (options?: GetUploadAuthParams) => SecurityToken2;
    /**
     * 获取临时上传凭证
     */
    GetUploadAuthToken: (query: GetUploadAuthTokenParams) => string;
    private _signUrl;
}
export declare const defaultService: ImagexService;
