import Service from "../../base/service";
import { ChatReq, ChatResp, ServiceOptions, TokenizeReq, TokenizeResp, ClassificationReq, ClassificationResp, EmbeddingsReq, EmbeddingsResp } from "./types";
export declare class MaasService extends Service {
    chat: (requestData: ChatReq, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ChatResp>>;
    tokenization: (requestData: TokenizeReq, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<TokenizeResp>>;
    classification: (requestData: ClassificationReq, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ClassificationResp>>;
    embeddings: (requestData: EmbeddingsReq, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<EmbeddingsResp>>;
    timeout: number;
    constructor(options?: ServiceOptions);
    Chat(requestData: ChatReq): Promise<ChatResp>;
    StreamChat(requestData: ChatReq): AsyncGenerator<ChatResp, void, unknown>;
    Tokenization(requestData: TokenizeReq): Promise<TokenizeResp>;
    Classification(requestData: ClassificationReq): Promise<ClassificationResp>;
    Embeddings(requestData: EmbeddingsReq): Promise<EmbeddingsResp>;
}
export * from "./types";
export * from "./v2";
export declare const defaultService: MaasService;
