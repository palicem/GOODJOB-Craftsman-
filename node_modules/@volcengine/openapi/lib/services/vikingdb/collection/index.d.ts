import { AbstractService } from "../abstractService";
import { type CreateCollectionRequest, type DropCollectionRequest, type GetCollectionInfoRequest, GetCollectionInfoResponse, ListCollectionsResponse, type UpdateCollectionRequest } from "./types";
import { type DenseVectorFieldInfo, type FieldInfo, type ScalarFieldInfo, type TextFieldInfo, VikingdbResponse } from "../types";
export declare class CollectionService extends AbstractService {
    isScalarField(field: FieldInfo): field is ScalarFieldInfo<any>;
    isDenseVectorField(field: FieldInfo): field is DenseVectorFieldInfo;
    isTextField(field: FieldInfo): field is TextFieldInfo;
    private encodeCollectionFields;
    private getPrimaryKey;
    CreateCollection({ CollectionAliases, CollectionName, Description, Fields, Vectorize, }: CreateCollectionRequest): Promise<VikingdbResponse>;
    UpdateCollection({ CollectionName, Fields, CollectionAliases, Description, }: UpdateCollectionRequest): Promise<VikingdbResponse>;
    private decodeCollectionInfo;
    GetCollectionInfo(request: GetCollectionInfoRequest): Promise<GetCollectionInfoResponse>;
    ListCollections(): Promise<ListCollectionsResponse>;
    DropCollection(request: DropCollectionRequest): Promise<VikingdbResponse>;
}
export * as collection from "./types";
