import Service from "../../base/service";
import { ServiceOptions } from "../../base/types";
import { ProjectsParams, ProjectsResult, ProjectDetailParams, ProjectDetailResult, ProjectUsersParams, ProjectUsersResult, ProjectUserRoleParams, ProjectUserRoleResult, ProjectNamespacesParams, ProjectNamespacesResult, ProjectNamespaceDetailParams, ProjectNamespaceDetailResult, ProjectNamespaceCreateParams, ProjectNamespaceCreateResult, ProjectNamespaceSourcesParams, ProjectNamespaceSourcesResult, ProjectNamespaceSourceDetailParams, ProjectNamespaceSourceDetailResult, ProjectNamespaceSourceDownloadParams, ProjectNamespaceSourceDownloadResult, ProjectNamespaceSourceUpdateParams, ProjectNamespaceSourceUpdateResult, ProjectNamespaceSourceAddParams, ProjectNamespaceSourceAddResult, ProjectNamespaceSourceDeleteByKeysParams, ProjectNamespaceSourceDeleteByKeysResult, ProjectNamespaceSourceDeleteByIdsParams, ProjectNamespaceSourceDeleteByIdsResult, ProjectNamespaceTargetsParams, ProjectNamespaceTargetsResult, ProjectNamespaceTargetDownloadParams, ProjectNamespaceTargetDownloadResult, ProjectNamespaceTargetUpdateParams, ProjectNamespaceTargetUpdateResult, ProjectNamespaceTargetDeleteByIdParams, ProjectNamespaceTargetDeleteByIdResult, ProjectTasksParams, ProjectTasksResult, ProjectTaskDetailParams, ProjectTaskDetailResult, ProjectTaskCreateParams, ProjectTaskCreateResult, ProjectTaskSourcesParams, ProjectTaskSourcesResult, ProjectTaskSourceDetailParams, ProjectTaskSourceDetailResult, ProjectTaskSourceDownloadParams, ProjectTaskSourceDownloadResult, ProjectTaskSourceUpdateParams, ProjectTaskSourceUpdateResult, ProjectTaskSourceAddParams, ProjectTaskSourceAddResult, ProjectTaskSourceDeleteByKeysParams, ProjectTaskSourceDeleteByKeysResult, ProjectTaskSourceDeleteByIdsParams, ProjectTaskSourceDeleteByIdsResult, ProjectTaskTargetsParams, ProjectTaskTargetsResult, ProjectTaskTargetUpdateParams, ProjectTaskTargetUpdateResult, ProjectTaskTargetDownloadParams, ProjectTaskTargetDownloadResult, ProjectTaskTargetDeleteByIdParams, ProjectTaskTargetDeleteByIdResult, ProjectTermsParams, ProjectTermsResult, ProjectTermDetailParams, ProjectTermDetailResult, ProjectTermTargetAddParams, ProjectTermTargetAddResult, ProjectTermTargetUpdateParams, ProjectTermTargetUpdateResult, ProjectTermTargetDeleteParams, ProjectTermTargetDeleteResult, ProjectTermSourceAddParams, ProjectTermSourceAddResult, ProjectTermSourceUpdateParams, ProjectTermSourceUpdateResult, ProjectTermSourceDeleteParams, ProjectTermSourceDeleteResult, ProjectDistributionsParams, ProjectDistributionsResult, ProjectDistributionsReleaseParams, ProjectDistributionsReleaseResult } from "./types";
export declare class i18nOpenapiService extends Service {
    constructor(options?: ServiceOptions);
    Projects: (requestData: ProjectsParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectsResult>>;
    ProjectDetail: (requestData: ProjectDetailParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectDetailResult>>;
    ProjectUsers: (requestData: ProjectUsersParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectUsersResult>>;
    ProjectUserRole: (requestData: ProjectUserRoleParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectUserRoleResult>>;
    ProjectNamespaces: (requestData: ProjectNamespacesParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespacesResult>>;
    ProjectNamespaceDetail: (requestData: ProjectNamespaceDetailParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceDetailResult>>;
    ProjectNamespaceCreate: (requestData: ProjectNamespaceCreateParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceCreateResult>>;
    ProjectNamespaceSources: (requestData: ProjectNamespaceSourcesParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceSourcesResult>>;
    ProjectNamespaceSourceDetail: (requestData: ProjectNamespaceSourceDetailParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceSourceDetailResult>>;
    ProjectNamespaceSourceDownload: (requestData: ProjectNamespaceSourceDownloadParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceSourceDownloadResult>>;
    ProjectNamespaceSourceUpdate: (requestData: ProjectNamespaceSourceUpdateParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceSourceUpdateResult>>;
    ProjectNamespaceSourceAdd: (requestData: ProjectNamespaceSourceAddParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceSourceAddResult>>;
    ProjectNamespaceSourceDeleteByKeys: (requestData: ProjectNamespaceSourceDeleteByKeysParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceSourceDeleteByKeysResult>>;
    ProjectNamespaceSourceDeleteByIds: (requestData: ProjectNamespaceSourceDeleteByIdsParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceSourceDeleteByIdsResult>>;
    ProjectNamespaceTargets: (requestData: ProjectNamespaceTargetsParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceTargetsResult>>;
    ProjectNamespaceTargetDownload: (requestData: ProjectNamespaceTargetDownloadParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceTargetDownloadResult>>;
    ProjectNamespaceTargetUpdate: (requestData: ProjectNamespaceTargetUpdateParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceTargetUpdateResult>>;
    ProjectNamespaceTargetDeleteById: (requestData: ProjectNamespaceTargetDeleteByIdParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectNamespaceTargetDeleteByIdResult>>;
    ProjectTasks: (requestData: ProjectTasksParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTasksResult>>;
    ProjectTaskDetail: (requestData: ProjectTaskDetailParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskDetailResult>>;
    ProjectTaskCreate: (requestData: ProjectTaskCreateParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskCreateResult>>;
    ProjectTaskSources: (requestData: ProjectTaskSourcesParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskSourcesResult>>;
    ProjectTaskSourceDetail: (requestData: ProjectTaskSourceDetailParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskSourceDetailResult>>;
    ProjectTaskSourceDownload: (requestData: ProjectTaskSourceDownloadParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskSourceDownloadResult>>;
    ProjectTaskSourceUpdate: (requestData: ProjectTaskSourceUpdateParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskSourceUpdateResult>>;
    ProjectTaskSourceAdd: (requestData: ProjectTaskSourceAddParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskSourceAddResult>>;
    ProjectTaskSourceDeleteByKeys: (requestData: ProjectTaskSourceDeleteByKeysParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskSourceDeleteByKeysResult>>;
    ProjectTaskSourceDeleteByIds: (requestData: ProjectTaskSourceDeleteByIdsParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskSourceDeleteByIdsResult>>;
    ProjectTaskTargets: (requestData: ProjectTaskTargetsParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskTargetsResult>>;
    ProjectTaskTargetUpdate: (requestData: ProjectTaskTargetUpdateParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskTargetUpdateResult>>;
    ProjectTaskTargetDownload: (requestData: ProjectTaskTargetDownloadParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskTargetDownloadResult>>;
    ProjectTaskTargetDeleteById: (requestData: ProjectTaskTargetDeleteByIdParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTaskTargetDeleteByIdResult>>;
    ProjectTerms: (requestData: ProjectTermsParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTermsResult>>;
    ProjectTermDetail: (requestData: ProjectTermDetailParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTermDetailResult>>;
    ProjectTermTargetAdd: (requestData: ProjectTermTargetAddParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTermTargetAddResult>>;
    ProjectTermTargetUpdate: (requestData: ProjectTermTargetUpdateParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTermTargetUpdateResult>>;
    ProjectTermTargetDelete: (requestData: ProjectTermTargetDeleteParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTermTargetDeleteResult>>;
    ProjectTermSourceAdd: (requestData: ProjectTermSourceAddParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTermSourceAddResult>>;
    ProjectTermSourceUpdate: (requestData: ProjectTermSourceUpdateParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTermSourceUpdateResult>>;
    ProjectTermSourceDelete: (requestData: ProjectTermSourceDeleteParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectTermSourceDeleteResult>>;
    ProjectDistributions: (requestData: ProjectDistributionsParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectDistributionsResult>>;
    ProjectDistributionsRelease: (requestData: ProjectDistributionsReleaseParams, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<ProjectDistributionsReleaseResult>>;
}
export declare const defaultService: i18nOpenapiService;
