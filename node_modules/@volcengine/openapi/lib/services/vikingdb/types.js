"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldType = exports.VikingdbRequestError = exports.VikingdbError = exports.VikingdbErrorCode = exports.VikingdbResponse = void 0;
class VikingdbResponse {
    constructor(
    /** @type string 原始请求 body string */
    OriginalRequest, 
    /** @type string 日志 ID */
    LogId) {
        this.OriginalRequest = OriginalRequest;
        this.LogId = LogId;
    }
}
exports.VikingdbResponse = VikingdbResponse;
var VikingdbErrorCode;
(function (VikingdbErrorCode) {
    VikingdbErrorCode[VikingdbErrorCode["ErrUnauthorized"] = 1000001] = "ErrUnauthorized";
    VikingdbErrorCode[VikingdbErrorCode["ErrNoPermission"] = 1000002] = "ErrNoPermission";
    VikingdbErrorCode[VikingdbErrorCode["ErrInvalidRequest"] = 1000003] = "ErrInvalidRequest";
    VikingdbErrorCode[VikingdbErrorCode["ErrCollectionExist"] = 1000004] = "ErrCollectionExist";
    VikingdbErrorCode[VikingdbErrorCode["ErrCollectionNotExist"] = 1000005] = "ErrCollectionNotExist";
    VikingdbErrorCode[VikingdbErrorCode["ErrOperationNotAllowed"] = 1000006] = "ErrOperationNotAllowed";
    VikingdbErrorCode[VikingdbErrorCode["ErrIndexExist"] = 1000007] = "ErrIndexExist";
    VikingdbErrorCode[VikingdbErrorCode["ErrIndexNotExist"] = 1000008] = "ErrIndexNotExist";
    VikingdbErrorCode[VikingdbErrorCode["ErrInitTbaseReader"] = 1000009] = "ErrInitTbaseReader";
    VikingdbErrorCode[VikingdbErrorCode["ErrQueryOpFailed"] = 1000010] = "ErrQueryOpFailed";
    VikingdbErrorCode[VikingdbErrorCode["ErrDataNotFound"] = 1000011] = "ErrDataNotFound";
    VikingdbErrorCode[VikingdbErrorCode["ErrInitTbaseWriter"] = 1000012] = "ErrInitTbaseWriter";
    VikingdbErrorCode[VikingdbErrorCode["ErrDelOpFailed"] = 1000013] = "ErrDelOpFailed";
    VikingdbErrorCode[VikingdbErrorCode["ErrUpsertOpFailed"] = 1000014] = "ErrUpsertOpFailed";
    VikingdbErrorCode[VikingdbErrorCode["ErrTokenMismatch"] = 1000015] = "ErrTokenMismatch";
    VikingdbErrorCode[VikingdbErrorCode["ErrInvalidQueryVec"] = 1000016] = "ErrInvalidQueryVec";
    VikingdbErrorCode[VikingdbErrorCode["ErrInvalidPrimaryKey"] = 1000017] = "ErrInvalidPrimaryKey";
    VikingdbErrorCode[VikingdbErrorCode["ErrInvalidPartition"] = 1000018] = "ErrInvalidPartition";
    VikingdbErrorCode[VikingdbErrorCode["ErrInvalidScalarCond"] = 1000019] = "ErrInvalidScalarCond";
    VikingdbErrorCode[VikingdbErrorCode["ErrInvalidProxyService"] = 1000020] = "ErrInvalidProxyService";
    VikingdbErrorCode[VikingdbErrorCode["ErrIndexRecall"] = 1000021] = "ErrIndexRecall";
    VikingdbErrorCode[VikingdbErrorCode["ErrIndexFetchData"] = 1000022] = "ErrIndexFetchData";
    VikingdbErrorCode[VikingdbErrorCode["ErrIndexNotReady"] = 1000023] = "ErrIndexNotReady";
    VikingdbErrorCode[VikingdbErrorCode["ErrAPINotImplemented"] = 1000024] = "ErrAPINotImplemented";
    VikingdbErrorCode[VikingdbErrorCode["ErrCalcEmbeddingFailed"] = 1000025] = "ErrCalcEmbeddingFailed";
    VikingdbErrorCode[VikingdbErrorCode["ErrListEmbeddingModels"] = 1000026] = "ErrListEmbeddingModels";
    VikingdbErrorCode[VikingdbErrorCode["ErrInternal"] = 1000028] = "ErrInternal";
    VikingdbErrorCode[VikingdbErrorCode["ErrInvalidRerank"] = 1000030] = "ErrInvalidRerank";
    VikingdbErrorCode[VikingdbErrorCode["ErrUserNoOrder"] = 1000032] = "ErrUserNoOrder";
    VikingdbErrorCode[VikingdbErrorCode["ErrUserOverdue"] = 1000033] = "ErrUserOverdue";
    VikingdbErrorCode[VikingdbErrorCode["ErrSdk"] = 9999999] = "ErrSdk";
})(VikingdbErrorCode = exports.VikingdbErrorCode || (exports.VikingdbErrorCode = {}));
class VikingdbError extends Error {
    constructor(
    /** @type number 后端错误码 */
    Code, 
    /** @type string 后端错误信息 */
    Message) {
        super(`[${Code}]: ${Message}`);
        this.Code = Code;
        this.Message = Message;
    }
}
exports.VikingdbError = VikingdbError;
class VikingdbRequestError extends VikingdbError {
    constructor(
    /** @type number 后端错误码 */
    Code, 
    /** @type string 后端错误信息 */
    Message, OriginalRequest, 
    /** @type string 请求日志 ID */
    LogId) {
        super(Code, Message);
        this.OriginalRequest = OriginalRequest;
        this.LogId = LogId;
    }
}
exports.VikingdbRequestError = VikingdbRequestError;
/* CreateCollection start */
var FieldType;
(function (FieldType) {
    FieldType["Int64"] = "int64";
    FieldType["Float32"] = "float32";
    FieldType["String"] = "string";
    FieldType["Boolean"] = "bool";
    FieldType["ListString"] = "list<string>";
    FieldType["ListInt64"] = "list<int64>";
    /** 稠密向量 */
    FieldType["DenseVector"] = "vector";
    /** 稀疏向量 */
    FieldType["SparseVector"] = "sparse_vector";
    FieldType["Text"] = "text";
})(FieldType = exports.FieldType || (exports.FieldType = {}));
//# sourceMappingURL=types.js.map