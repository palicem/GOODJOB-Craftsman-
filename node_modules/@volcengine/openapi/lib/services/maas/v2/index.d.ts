import Service from "../../../base/service";
import { ChatReq, ChatResp, ClassificationReq, ClassificationResp, EmbeddingsReq, EmbeddingsResp, ServiceOptions, TokenizeReq, TokenizeResp } from "./types";
export declare class MaasServiceV2 extends Service {
    timeout: number;
    chat: (requestData: ChatReq, params?: (import("../../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../../base/types").OpenApiResponse<ChatResp>>;
    tokenization: (requestData: TokenizeReq, params?: (import("../../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../../base/types").OpenApiResponse<TokenizeResp>>;
    classification: (requestData: ClassificationReq, params?: (import("../../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../../base/types").OpenApiResponse<ClassificationResp>>;
    embeddings: (requestData: EmbeddingsReq, params?: (import("../../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../../base/types").OpenApiResponse<EmbeddingsResp>>;
    constructor(options?: ServiceOptions);
    Chat(endpointId: string, reqData: ChatReq): Promise<ChatResp>;
    StreamChat(endpointId: string, reqData: ChatReq): AsyncGenerator<ChatResp, void, unknown>;
    Tokenization(endpointId: string, reqData: TokenizeReq): Promise<TokenizeResp>;
    Classification(endpointId: string, reqData: ClassificationReq): Promise<ClassificationResp>;
    Embeddings(endpointId: string, reqData: EmbeddingsReq): Promise<EmbeddingsResp>;
}
