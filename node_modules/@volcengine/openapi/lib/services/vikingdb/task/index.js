"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.task = exports.TaskService = void 0;
const abstractService_1 = require("../abstractService");
const types_1 = require("../types");
const pathname_1 = require("./pathname");
const types_2 = require("./types");
class TaskService extends abstractService_1.AbstractService {
    async CreateTask({ TaskType, TaskParams }) {
        const response = await this.request(pathname_1.Pathname.CreateTask, {
            task_type: TaskType,
            task_params: TaskParams,
        });
        return new types_2.CreateTaskResponse(response.data, response.original_request, response.request_id);
    }
    async UpdateTask({ TaskType, TaskStatus }) {
        const response = await this.request(pathname_1.Pathname.UpdateTask, {
            task_id: TaskType,
            task_status: TaskStatus,
        });
        return new types_1.VikingdbResponse(response.original_request, response.request_id);
    }
    async GetTaskInfo({ TaskId }) {
        const response = await this.request(pathname_1.Pathname.GetTaskInfo, {
            task_id: TaskId,
        });
        return new types_2.GetTaskInfoResponse(response.data, response.original_request, response.request_id);
    }
}
exports.TaskService = TaskService;
exports.task = __importStar(require("./types"));
//# sourceMappingURL=index.js.map