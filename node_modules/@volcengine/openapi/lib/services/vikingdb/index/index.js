"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.index = exports.IndexService = void 0;
const abstractService_1 = require("../abstractService");
const types_1 = require("../types");
const types_2 = require("./types");
const pathname_1 = require("./pathname");
const backend_1 = require("./backend");
class IndexService extends abstractService_1.AbstractService {
    async DropIndex({ CollectionName, IndexName }) {
        const response = await this.request(pathname_1.Pathname.DropIndex, {
            collection_name: CollectionName,
            index_name: IndexName,
        });
        return new types_1.VikingdbResponse(response.original_request, response.request_id);
    }
    decodeVectorIndex(data) {
        if (!data) {
            return undefined;
        }
        const record = {
            IndexType: data.index_type,
            Distance: data.distance,
            Quant: data.quant,
        };
        if (data.index_type === backend_1.IndexType.Hnsw) {
            Object.assign(record, {
                HnswCef: data.hnsw_cef,
                HnswM: data.hnsw_m,
                HnswSef: data.hnsw_sef,
            });
        }
        else if (data.index_type === backend_1.IndexType.Diskann) {
            Object.assign(record, {
                CacheRatio: data.cache_ratio,
                DiskannCef: data.diskann_cef,
                DiskannM: data.diskann_m,
                PqCodeRatio: data.pq_code_ratio,
            });
        }
        return record;
    }
    decodeIndexInfo(data) {
        var _a, _b;
        const info = {
            CollectionName: data.collection_name,
            IndexName: data.index_name,
            CpuQuota: data.cpu_quota,
            CreateTime: data.create_time,
            UpdateTime: data.update_time,
            UpdatePerson: data.update_person,
            ShardPolicy: data.shard_policy,
            Status: data.status,
            IndexCost: {
                CpuCore: data.index_cost.cpu_core,
                MemoryGb: data.index_cost.mem_gb,
            },
            Description: data.description,
            ShardCount: data.shard_count,
            ScalarIndex: (_a = data.scalar_index) === null || _a === void 0 ? void 0 : _a.map((item) => ({
                FieldName: item.field_name,
                FieldType: item.field_type,
                DefaultValue: item.default_val,
            })),
            VectorIndex: this.decodeVectorIndex(data.vector_index),
        };
        if (data.partition_by) {
            info.PartitionBy = data.partition_by;
            info.Partitions = (_b = data.partitions) !== null && _b !== void 0 ? _b : [];
        }
        return info;
    }
    async GetIndexInfo({ CollectionName, IndexName, }) {
        const response = await this.request(pathname_1.Pathname.GetIndexInfo, {
            collection_name: CollectionName,
            index_name: IndexName,
        });
        const { data, request_id, original_request } = response;
        const info = this.decodeIndexInfo(data);
        return new types_2.GetIndexInfoResponse(info, original_request, request_id);
    }
    async ListIndexes({ CollectionName }) {
        const response = await this.request(pathname_1.Pathname.ListIndexes, {
            collection_name: CollectionName,
        });
        const infos = response.data.map(this.decodeIndexInfo, this);
        return new types_2.ListIndexesResponse(infos, response.original_request, response.request_id);
    }
    encodeShardConfig(shardConfig) {
        const data = {
            shard_policy: shardConfig.ShardPolicy,
        };
        if (shardConfig.ShardPolicy === backend_1.ShardPolicy.Custom) {
            data.shard_count = shardConfig.ShardCount;
        }
        return data;
    }
    async CreateIndex({ CollectionName, CpuQuota, Description, IndexName, PartitionBy, ScalarIndexes, ShardConfig, VectorIndex, }) {
        const data = Object.assign({ collection_name: CollectionName, index_name: IndexName, description: Description, cpu_quota: CpuQuota, partition_by: PartitionBy, scalar_index: ScalarIndexes }, this.encodeShardConfig(ShardConfig));
        if (VectorIndex) {
            const vectorIndex = {
                index_type: VectorIndex.IndexType,
                distance: VectorIndex.Distance,
                quant: VectorIndex.Quant,
            };
            if (VectorIndex.IndexType === backend_1.IndexType.Hnsw) {
                Object.assign(vectorIndex, {
                    hnsw_m: VectorIndex.HnswM,
                    hnsw_cef: VectorIndex.HnswCef,
                    hnsw_sef: VectorIndex.HnswSef,
                });
            }
            else if (VectorIndex.IndexType === backend_1.IndexType.Diskann) {
                Object.assign(vectorIndex, {
                    diskann_cef: VectorIndex.DiskannCef,
                    cache_ratio: VectorIndex.CacheRatio,
                    diskann_m: VectorIndex.DiskannM,
                    pq_code_ratio: VectorIndex.PqCodeRatio,
                });
            }
            data.vector_index = vectorIndex;
        }
        const response = await this.request(pathname_1.Pathname.CreateIndex, data);
        return new types_1.VikingdbResponse(response.original_request, response.request_id);
    }
    async UpdateIndex({ CollectionName, ShardConfig, CpuQuota, Description, IndexName, ScalarIndexes, }) {
        const request = {
            collection_name: CollectionName,
            index_name: IndexName,
            description: Description,
            cpu_quota: CpuQuota,
            scalar_index: ScalarIndexes,
        };
        if (ShardConfig) {
            Object.assign(request, this.encodeShardConfig(ShardConfig));
        }
        const response = await this.request(pathname_1.Pathname.UpdateIndex, request);
        return new types_1.VikingdbResponse(response.original_request, response.request_id);
    }
}
exports.IndexService = IndexService;
exports.index = __importStar(require("./types"));
//# sourceMappingURL=index.js.map