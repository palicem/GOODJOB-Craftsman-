import Service from "../../base/service";
import { ServiceOptions, FetchParams, SecurityToken2 } from "../../base/types";
import * as types from "./types";
export declare class VodService extends Service {
    constructor(options?: ServiceOptions);
    private uploadToBStream;
    private _dynamicUploadWithUnknownSize;
    private chunkedStreamUpload;
    private directUploadStream;
    private uploadToB;
    private directUpload;
    private createUploadTask;
    private chunkUpload;
    private initUploadPart;
    private uploadPart;
    private uploadMergePart;
    private generateMergeBody;
    /**
     * 媒资上传
     */
    UploadMedia: (req: types.VodUploadMediaRequest) => Promise<import("../../base/types").OpenApiResponse<types.VodCommitUploadInfoResult>>;
    UploadMaterial: (req: types.VodUploadMaterialRequest) => Promise<import("../../base/types").OpenApiResponse<types.VodCommitUploadInfoResult>>;
    ApplyUploadInfo: (requestData: types.VodApplyUploadInfoRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodApplyUploadInfoResult>>;
    CommitUploadInfo: (requestData: types.VodCommitUploadInfoRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodCommitUploadInfoResult>>;
    UploadMediaByUrl: (req: types.VodUploadMediaByUrlRequest) => Promise<import("../../base/types").OpenApiResponse<types.VodUploadMediaByUrlResult>>;
    QueryUploadTaskInfo: (requestData: types.VodQueryUploadTaskInfoRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodQueryUploadTaskInfoResult>>;
    /**
     * 媒资管理
     */
    GetMediaInfos: (requestData: types.VodGetMediaInfosRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodGetMediaInfosResult>>;
    UpdateMediaInfo: (requestData: types.VodUpdateMediaInfoRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<undefined>>;
    UpdateMediaPublishStatus: (requestData: types.VodUpdateMediaPublishStatusRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<undefined>>;
    GetRecommendedPoster: (requestData: types.VodGetRecommendedPosterRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodGetRecommendedPosterResult>>;
    DeleteMedia: (requestData: types.VodDeleteMediaRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodDeleteMediaResult>>;
    DeleteTranscodes: (requestData: types.VodDeleteTranscodesRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodDeleteTranscodesResult>>;
    GetMediaList: (requestData: types.VodGetMediaListRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodGetMediaListResult>>;
    GetSubtitleInfoList: (requestData: types.VodGetSubtitleInfoListRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodGetSubtitleInfoListResult>>;
    UpdateSubtitleStatus: (requestData: types.VodUpdateSubtitleStatusRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodUpdateSubtitleStatusResult>>;
    UpdateSubtitleInfo: (requestData: types.VodUpdateSubtitleInfoRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<undefined>>;
    /**
     * 媒资处理
     */
    StartWorkflow: (requestData: types.VodStartWorkflowRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodStartWorkflowResult>>;
    /**
     * 媒资播放
     */
    GetPlayInfo: (requestData: types.VodGetPlayInfoRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodGetPlayInfoResult>>;
    GetPlayAuthToken: (query: types.VodGetPlayInfoRequest, expireSeconds?: number) => string;
    GetPrivateDrmAuthToken: (query: types.VodGetPrivateDrmPlayAuthRequest, expireSeconds?: number) => string;
    GetPrivateDrmPlayAuth: (requestData: types.VodGetPrivateDrmPlayAuthRequest, params?: (FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<types.VodGetPrivateDrmPlayAuthResult>>;
    GetUploadToken: (expire?: number) => SecurityToken2;
    private _signUrl;
}
export declare const defaultService: VodService;
