"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaasServiceV2 = void 0;
const service_1 = __importDefault(require("../../../base/service"));
const utils_1 = require("../../../base/utils");
const error_1 = require("../error");
const debug = (0, utils_1.createDebug)("maas");
class MaasServiceV2 extends service_1.default {
    constructor(options) {
        super(Object.assign(Object.assign({}, options), { serviceName: "ml_maas" }));
        this.chat = this.createAPI("chat", {
            method: "POST",
            contentType: "json",
        });
        this.tokenization = this.createAPI("tokenization", {
            method: "POST",
            contentType: "json",
        });
        this.classification = this.createAPI("classification", {
            method: "POST",
            contentType: "json",
        });
        this.embeddings = this.createAPI("embeddings", {
            method: "POST",
            contentType: "json",
        });
        this.timeout = (options === null || options === void 0 ? void 0 : options.timeout) || 60000; // default timeout is 60s
    }
    Chat(endpointId, reqData) {
        return this.chat(Object.assign(Object.assign({}, reqData), { stream: false }), {
            Action: "chat",
            pathname: `/api/v2/endpoint/${endpointId}/chat`,
            timeout: this.timeout,
        })
            .then((done) => {
            // 200 status code
            return done;
        })
            .then((result) => {
            debug("chat result. result: %j", result);
            if (result.error != null && result.error != undefined) {
                const err = result.error;
                throw new error_1.MaasError(err.code, err.message, err.code_n);
            }
            return result;
        })
            .catch((error) => {
            var _a;
            if (error instanceof error_1.MaasError) {
                throw error;
            }
            const err = (_a = error.response.data) === null || _a === void 0 ? void 0 : _a.error;
            if (err !== undefined && err !== null) {
                throw new error_1.MaasError(err.code, err.message, err.code_n);
            }
            else {
                throw (0, error_1.new_client_sdk_error)(error);
            }
        });
    }
    StreamChat(endpointId, reqData) {
        return __asyncGenerator(this, arguments, function* StreamChat_1() {
            var _a, e_1, _b, _c;
            const response = yield __await(this.chat(Object.assign(Object.assign({}, reqData), { stream: true }), {
                Action: "chat",
                pathname: `/api/v2/endpoint/${endpointId}/chat`,
                responseType: "stream",
                timeout: this.timeout,
            }).catch((error) => {
                var _a;
                const err = (_a = error.response.data) === null || _a === void 0 ? void 0 : _a.error;
                if (err !== undefined && err !== null) {
                    throw new error_1.MaasError(err.code, err.message, err.code_n);
                }
                else {
                    throw (0, error_1.new_client_sdk_error)(error);
                }
            }));
            let buffer = "";
            const _parse_line = (line) => {
                if (line.length > 0) {
                    const pos = line.indexOf(":");
                    if (pos >= 0) {
                        // [field]:[data]
                        const field = line.substring(0, pos).trim(), data = line.substring(pos + 1).trim();
                        if (field == "") {
                            // ignore comment
                            return null;
                        }
                        else if (field === "data" && data != "[DONE]") {
                            const result = JSON.parse(data);
                            if (result.error !== undefined && result.error !== null) {
                                const err = result.error;
                                throw new error_1.MaasError(err.code, err.message, err.code_n);
                            }
                            return result;
                        }
                    }
                }
                return null;
            };
            try {
                for (var _d = true, response_1 = __asyncValues(response), response_1_1; response_1_1 = yield __await(response_1.next()), _a = response_1_1.done, !_a;) {
                    _c = response_1_1.value;
                    _d = false;
                    try {
                        const chunk = _c;
                        buffer += chunk;
                        let pos = buffer.indexOf("\n");
                        while (pos > -1) {
                            const line = buffer.substring(0, pos).trim();
                            buffer = buffer.substring(pos + 1);
                            const result = _parse_line(line);
                            if (result !== null) {
                                yield yield __await(result);
                            }
                            pos = buffer.indexOf("\n");
                        }
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = response_1.return)) yield __await(_b.call(response_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (buffer.length > 0) {
                const result = _parse_line(buffer);
                if (result !== null) {
                    yield yield __await(result);
                }
            }
        });
    }
    Tokenization(endpointId, reqData) {
        return this.tokenization(reqData, {
            Action: "tokenization",
            pathname: `/api/v2/endpoint/${endpointId}/tokenization`,
            timeout: this.timeout,
        })
            .then((done) => {
            // 200 status code
            return done;
        })
            .then((result) => {
            debug("tokenization result. result: %j", result);
            if (result.error != null && result.error != undefined) {
                const err = result.error;
                throw new error_1.MaasError(err.code, err.message, err.code_n);
            }
            return result;
        })
            .catch((error) => {
            var _a;
            if (error instanceof error_1.MaasError) {
                throw error;
            }
            const err = (_a = error.response.data) === null || _a === void 0 ? void 0 : _a.error;
            if (err !== undefined && err !== null) {
                throw new error_1.MaasError(err.code, err.message, err.code_n);
            }
            else {
                throw (0, error_1.new_client_sdk_error)(error);
            }
        });
    }
    Classification(endpointId, reqData) {
        return this.classification(reqData, {
            Action: "classification",
            pathname: `/api/v2/endpoint/${endpointId}/classification`,
            timeout: this.timeout,
        })
            .then((done) => {
            // 200 status code
            return done;
        })
            .then((result) => {
            debug("classification result. result: %j", result);
            if (result.error != null && result.error != undefined) {
                const err = result.error;
                throw new error_1.MaasError(err.code, err.message, err.code_n);
            }
            return result;
        })
            .catch((error) => {
            var _a;
            if (error instanceof error_1.MaasError) {
                throw error;
            }
            const err = (_a = error.response.data) === null || _a === void 0 ? void 0 : _a.error;
            if (err !== undefined && err !== null) {
                throw new error_1.MaasError(err.code, err.message, err.code_n);
            }
            else {
                throw (0, error_1.new_client_sdk_error)(error);
            }
        });
    }
    Embeddings(endpointId, reqData) {
        return this.embeddings(reqData, {
            Action: "embeddings",
            pathname: `/api/v2/endpoint/${endpointId}/embeddings`,
            timeout: this.timeout,
        })
            .then((done) => {
            // 200 status code
            return done;
        })
            .then((result) => {
            debug("embeddings result. result: %j", result);
            if (result.error != null && result.error != undefined) {
                const err = result.error;
                throw new error_1.MaasError(err.code, err.message, err.code_n);
            }
            return result;
        })
            .catch((error) => {
            var _a;
            if (error instanceof error_1.MaasError) {
                throw error;
            }
            const err = (_a = error.response.data) === null || _a === void 0 ? void 0 : _a.error;
            if (err !== undefined && err !== null) {
                throw new error_1.MaasError(err.code, err.message, err.code_n);
            }
            else {
                throw (0, error_1.new_client_sdk_error)(error);
            }
        });
    }
}
exports.MaasServiceV2 = MaasServiceV2;
//# sourceMappingURL=index.js.map