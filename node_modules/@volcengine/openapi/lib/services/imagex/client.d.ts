import Service from "../../base/service";
import { ServiceOptions } from "../../base/types";
import * as types from "./type";
/**
 * Class representing a ImagexService.
 */
export default class ImagexService extends Service {
    /**
     * 创建 ImagexService
     * @param options 初始化配置
     */
    constructor(options?: ServiceOptions);
    /**
     * @function UpdateImageDomainVolcOrigin
     */
    UpdateImageDomainVolcOrigin: (requestData: types.UpdateImageDomainVolcOriginQuery & types.UpdateImageDomainVolcOriginBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<string | undefined>>;
    /**
     * @function DelDomain
     */
    DelDomain: (requestData: types.DelDomainQuery & types.DelDomainBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function AddDomainV1
     */
    AddDomainV1: (requestData: types.AddDomainV1Query & types.AddDomainV1Body, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Domain?: string | undefined;
    } | undefined>>;
    /**
     * @function UpdateImageDomainIPAuth
     */
    UpdateImageDomainIPAuth: (requestData: types.UpdateImageDomainIPAuthQuery & types.UpdateImageDomainIPAuthBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<string | undefined>>;
    /**
     * @function UpdateRefer
     */
    UpdateRefer: (requestData: types.UpdateReferQuery & types.UpdateReferBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<string | undefined>>;
    /**
     * @function UpdateImageDomainUaAccess
     */
    UpdateImageDomainUaAccess: (requestData: types.UpdateImageDomainUaAccessQuery & types.UpdateImageDomainUaAccessBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<string | undefined>>;
    /**
     * @function UpdateHttps
     */
    UpdateHttps: (requestData: types.UpdateHttpsQuery & types.UpdateHttpsBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<string | undefined>>;
    /**
     * @function UpdateImageDomainDownloadSpeedLimit
     */
    UpdateImageDomainDownloadSpeedLimit: (requestData: types.UpdateImageDomainDownloadSpeedLimitQuery & types.UpdateImageDomainDownloadSpeedLimitBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        msg: string;
    } | undefined>>;
    /**
     * @function UpdateResponseHeader
     */
    UpdateResponseHeader: (requestData: types.UpdateResponseHeaderQuery & types.UpdateResponseHeaderBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<string | undefined>>;
    /**
     * @function UpdateImageDomainAreaAccess
     */
    UpdateImageDomainAreaAccess: (requestData: types.UpdateImageDomainAreaAccessQuery & types.UpdateImageDomainAreaAccessBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<string | undefined>>;
    /**
     * @function UpdateDomainAdaptiveFmt
     */
    UpdateDomainAdaptiveFmt: (requestData: types.UpdateDomainAdaptiveFmtQuery & types.UpdateDomainAdaptiveFmtBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<string | undefined>>;
    /**
     * @function UpdateImageDomainConfig
     */
    UpdateImageDomainConfig: (requestData: types.UpdateImageDomainConfigQuery & types.UpdateImageDomainConfigBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateAdvance
     */
    UpdateAdvance: (requestData: types.UpdateAdvanceQuery & types.UpdateAdvanceBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageDomainBandwidthLimit
     */
    UpdateImageDomainBandwidthLimit: (requestData: types.UpdateImageDomainBandwidthLimitQuery & types.UpdateImageDomainBandwidthLimitBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        msg: string;
    } | undefined>>;
    /**
     * @function UpdateSlimConfig
     */
    UpdateSlimConfig: (requestData: types.UpdateSlimConfigQuery & types.UpdateSlimConfigBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function SetDefaultDomain
     */
    SetDefaultDomain: (requestData: types.SetDefaultDomainBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function DescribeImageVolcCdnAccessLog
     */
    DescribeImageVolcCdnAccessLog: (requestData: types.DescribeImageVolcCdnAccessLogQuery & types.DescribeImageVolcCdnAccessLogBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Domain: string;
        Logs: {
            EndTime: number;
            LogName: string;
            LogPath: string;
            LogSize: number;
            StartTime: number;
        }[];
        PageNum: number;
        PageSize: number;
        TotalCount: number;
    }>>;
    /**
     * @function GetResponseHeaderValidateKeys
     */
    GetResponseHeaderValidateKeys: (requestData: Record<string, any>, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ValidateRespHdrKeys: string[];
    } | undefined>>;
    /**
     * @function GetDomainConfig
     */
    GetDomainConfig: (requestData: types.GetDomainConfigQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        access_control: {
            ip_auth: {
                enabled: boolean;
                is_white_mode: boolean;
                values: string[];
            };
            refer_link: any;
            referer_link: {
                allow_empty_refer: boolean;
                enabled: boolean;
                ignore_case: boolean;
                ignore_scheme: boolean;
                is_white_mode: boolean;
                regex_values: string[];
                values: string[];
            };
            remote_auth: {
                auth_request_header: {
                    action: string;
                    header: {
                        key: string;
                        value: string;
                        value_type: string;
                    }[];
                    host: string;
                    value: string;
                };
                auth_request_query: {
                    action: string;
                    query: {
                        key: string;
                        value: string;
                        value_type: string;
                    }[];
                    value: string;
                };
                auth_response: {
                    auth_result_cache: {
                        action: string;
                        cache_key: string[];
                        ttl: number;
                    };
                    auth_server_status_code: {
                        default_action: string;
                        fail_code: string;
                        success_code: string;
                    };
                    auth_server_timeout: {
                        action: string;
                        time: number;
                    };
                    response: {
                        fail_code: string;
                    };
                };
                auth_server: {
                    address: string;
                    backup_address: string;
                    path_type: string;
                    path_value: string;
                    request_method: string;
                };
                enabled: boolean;
                match_rule: {
                    match_operator: string;
                    object: string;
                    value: string;
                }[];
            };
            ua_list: {
                enabled: boolean;
                is_white_mode: boolean;
                values: string[];
            };
            url_auth: {
                enabled: boolean;
                type_a: {
                    backup_sk: string;
                    expire_time: number;
                    main_sk: string;
                    sign_param: string;
                };
                type_b: {
                    backup_sk: string;
                    expire_time: number;
                    main_sk: string;
                };
                type_c: {
                    backup_sk: string;
                    expire_time: number;
                    main_sk: string;
                };
                type_d: {
                    backup_sk: string;
                    expire_time: number;
                    main_sk: string;
                    sign_param: string;
                    time_format: string;
                    time_param: string;
                };
            };
        };
        adaptfmt: boolean;
        do_slim: boolean;
        domain: string;
        global_acceleration: boolean;
        https_config: {
            enable_http2: boolean;
            cert: {
                common_name: string;
                id: string;
                not_after: number;
            };
            cert_id: string;
            enable_force_redirect: boolean;
            enable_https: boolean;
            enable_ocsp: boolean;
            force_https: boolean;
            force_redirect_code: string;
            force_redirect_type: string;
            hsts: {
                enabled?: boolean | undefined;
                subdomain?: string | undefined;
                ttl?: number | undefined;
            };
            tls_versions: string[];
        };
        lock_status: {
            compression_locked: boolean;
            domain_locked: boolean;
            ip_access_rule_locked: boolean;
            reason: string;
            referer_access_rule_locked: boolean;
            remote_auth_locked: boolean;
            response_header_locked: boolean;
            sign_url_auth_locked: boolean;
            ua_access_rule_locked: boolean;
        };
        page_optimization?: {
            enabled: boolean;
            optimization_type: string[];
        } | undefined;
        resp_hdrs: {
            access_origin_control: boolean;
            action: string;
            key: string;
            value: string;
        }[];
        status: string;
    } | undefined>>;
    /**
     * @function GetServiceDomains
     */
    GetServiceDomains: (requestData: types.GetServiceDomainsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        cname?: string | undefined;
        create_time?: number | undefined;
        domain?: string | undefined;
        https_config?: {
            enable_http2?: boolean | undefined;
            cert_id: string;
        } | undefined;
        is_default?: boolean | undefined;
        lock_status: {
            compression_locked: boolean;
            domain_locked: boolean;
            ip_access_rule_locked: boolean;
            reason?: string | undefined;
            referer_access_rule_locked: boolean;
            remote_auth_locked: boolean;
            response_header_locked: boolean;
            sign_url_auth_locked: boolean;
            ua_access_rule_locked: boolean;
        };
        reason?: string | undefined;
        region?: string | undefined;
        status?: string | undefined;
        user?: string | undefined;
    }[] | undefined>>;
    /**
     * @function DeleteImageMonitorRules
     */
    DeleteImageMonitorRules: (requestData: types.DeleteImageMonitorRulesBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DeletedRules: string[];
    } | undefined>>;
    /**
     * @function DeleteImageMonitorRecords
     */
    DeleteImageMonitorRecords: (requestData: types.DeleteImageMonitorRecordsBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DeletedRecords: string[];
    } | undefined>>;
    /**
     * @function CreateImageMonitorRule
     */
    CreateImageMonitorRule: (requestData: types.CreateImageMonitorRuleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RuleId: string;
    } | undefined>>;
    /**
     * @function UpdateImageMonitorRule
     */
    UpdateImageMonitorRule: (requestData: types.UpdateImageMonitorRuleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageMonitorRuleStatus
     */
    UpdateImageMonitorRuleStatus: (requestData: types.UpdateImageMonitorRuleStatusBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function GetImageAlertRecords
     */
    GetImageAlertRecords: (requestData: types.GetImageAlertRecordsBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        AlertRecords: {
            AlertAt: string;
            AlertCond: {
                AlertContent: {
                    AggrInterval: number;
                    Dim: string;
                    Func: string;
                    Item: string;
                    Op: string;
                    RepeatCnt: number;
                    Threshold: number;
                    Vals: {
                        BaseTime: string;
                        DimVal: string;
                        PrevVals: {
                            BaseTime: string;
                            Val: number;
                            ValBase: string;
                            ValTime: string;
                        }[];
                        Val: number;
                        ValBase: number;
                        ValTime: string;
                    }[];
                };
                LogicOp: string;
            };
            Level: string;
            Marker: string;
            Name: string;
            OS: string;
            Phase: string;
            RuleId: string;
        }[];
        HasMore: boolean;
        Total: number;
    }>>;
    /**
     * @function GetImageMonitorRules
     */
    GetImageMonitorRules: (requestData: types.GetImageMonitorRulesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        MonitorRules: {
            Appid: string;
            Cond: {
                ItemCond: {
                    AggrInterval: number;
                    CntThreshold?: number | undefined;
                    Func: string;
                    Item: string;
                    Op: string;
                    RepeatCnt: number;
                    Threshold: number;
                }[];
                LogicOp: string;
            };
            CreateAt: string;
            Enabled: boolean;
            Filter?: {
                DimFilter: {
                    Dim: string;
                    Not?: boolean | undefined;
                    Vals: string[];
                }[];
                LogicOp: string;
            } | undefined;
            Frequency: number;
            GroupBy?: string | undefined;
            Level: string;
            Name: string;
            Notification: {
                CallbackUrl?: string | undefined;
                Content: string;
                Mode: string[];
                SilentDur: number;
                Title: string;
            };
            OS?: string | undefined;
            Phase: string;
            RuleId: string;
            UpdateAt: string;
        }[];
        Total: number;
    } | undefined>>;
    /**
     * @function CreateImageSettingRule
     */
    CreateImageSettingRule: (requestData: types.CreateImageSettingRuleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RuleId: string;
    } | undefined>>;
    /**
     * @function DeleteImageSettingRule
     */
    DeleteImageSettingRule: (requestData: types.DeleteImageSettingRuleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageSettingRulePriority
     */
    UpdateImageSettingRulePriority: (requestData: types.UpdateImageSettingRulePriorityBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageSettingRule
     */
    UpdateImageSettingRule: (requestData: types.UpdateImageSettingRuleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function GetImageSettings
     */
    GetImageSettings: (requestData: types.GetImageSettingsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Settings: {
            Category: string;
            ChildSettings: Record<string, unknown>[];
            Comment: string;
            DefaultValue: Record<string, unknown>;
            Name: string;
            ParentId: string;
            SettingId: string;
            Status: number;
            Type: string;
            UpdateAt: string;
            ValueRange: {
                Lower: Record<string, unknown>;
                Upper: Record<string, unknown>;
            };
            ValueType: string;
        }[];
    } | undefined>>;
    /**
     * @function GetImageSettingRuleHistory
     */
    GetImageSettingRuleHistory: (requestData: types.GetImageSettingRuleHistoryQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Records: {
            ModifiedAt: string;
            Modifier: string;
            ModifyMsg: string;
            NewInfo: {
                Content: string;
                Value: Record<string, unknown>;
            };
            OldInfo: {
                Content: string;
                Value: Record<string, unknown>;
            };
        }[];
        Total: number;
    } | undefined>>;
    /**
     * @function GetImageSettingRules
     */
    GetImageSettingRules: (requestData: types.GetImageSettingRulesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        AppId: string;
        AppRegion: string;
        Category: string;
        Comment: string;
        DefaultValue: Record<string, unknown>;
        Name: string;
        ParentId: string;
        Rules: {
            Cond?: {
                Conds?: {
                    Key?: string | undefined;
                    Op?: string | undefined;
                    Value?: Record<string, unknown> | undefined;
                }[] | undefined;
                Type?: string | undefined;
            } | undefined;
            Content: string;
            Creator: string;
            Name: string;
            Priority: number;
            RuleId: string;
            Value: Record<string, unknown>;
        }[];
        SettingId: string;
        Status: number;
        Type: string;
        UpdateAt: string;
        ValueRange: {
            Lower?: Record<string, unknown> | undefined;
            Upper?: Record<string, unknown> | undefined;
        };
        ValueType: string;
    } | undefined>>;
    /**
     * @function CreateImageMigrateTask
     */
    CreateImageMigrateTask: (requestData: types.CreateImageMigrateTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TaskId: string;
    }>>;
    /**
     * @function DeleteImageMigrateTask
     */
    DeleteImageMigrateTask: (requestData: types.DeleteImageMigrateTaskQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function ExportFailedMigrateTask
     */
    ExportFailedMigrateTask: (requestData: types.ExportFailedMigrateTaskQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Entries: {
            ErrCode: number;
            ErrMsg: string;
            Key: string;
        }[];
    } | undefined>>;
    /**
     * @function UpdateImageTaskStrategy
     */
    UpdateImageTaskStrategy: (requestData: types.UpdateImageTaskStrategyBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function TerminateImageMigrateTask
     */
    TerminateImageMigrateTask: (requestData: types.TerminateImageMigrateTaskQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function GetVendorBuckets
     */
    GetVendorBuckets: (requestData: types.GetVendorBucketsBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Buckets: string[];
    } | undefined>>;
    /**
     * @function GetImageMigrateTasks
     */
    GetImageMigrateTasks: (requestData: types.GetImageMigrateTasksQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Tasks: {
            Dst: {
                Prefix: string;
                ServiceId: string;
                ServiceName: string;
                SkipBucket: boolean;
                UploadConf: number;
            };
            ID: string;
            Name: string;
            Progress: {
                ErrCode: number;
                ErrMsg: string;
                FailCnt: number;
                SuccessAmount: number;
                SuccessCnt: number;
                TotalAmount: number;
                TotalCnt: number;
            };
            Run: {
                DoneAt: string;
                StartAt: string;
            }[];
            RunStrategy: {
                ReadQps: number[];
                ReadRate: number[];
            };
            Source: {
                AK: string;
                Bucket: string;
                CdnHost: string;
                Endpoint: string;
                Prefix: string[];
                Regex: string[];
                Region: string;
                SK: string;
                SkipHeader: boolean;
                TimeEnd: string;
                TimeStart: string;
                Vendor: string;
            };
            Status: string;
            Transcode: {
                AlphaDemotion: boolean;
                DemotionFmt: string;
                Format: string;
                Quality: number;
            };
        }[];
        Total: number;
    } | undefined>>;
    /**
     * @function RerunImageMigrateTask
     */
    RerunImageMigrateTask: (requestData: types.RerunImageMigrateTaskQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function GetImageAddOnTag
     */
    GetImageAddOnTag: (requestData: types.GetImageAddOnTagQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Tag: string[];
    } | undefined>>;
    /**
     * @function DescribeImageXCubeUsage
     */
    DescribeImageXCubeUsage: (requestData: types.DescribeImageXCubeUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CubeData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
        }[];
    }>>;
    /**
     * @function DescribeImageXSourceRequestBandwidth
     */
    DescribeImageXSourceRequestBandwidth: (requestData: types.DescribeImageXSourceRequestBandwidthQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        BpsData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DomainName?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXSourceRequestTraffic
     */
    DescribeImageXSourceRequestTraffic: (requestData: types.DescribeImageXSourceRequestTrafficQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TrafficData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DomainName?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXSourceRequest
     */
    DescribeImageXSourceRequest: (requestData: types.DescribeImageXSourceRequestQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RequestCnt: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DataType?: string | undefined;
            DomainName?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXBucketRetrievalUsage
     */
    DescribeImageXBucketRetrievalUsage: (requestData: types.DescribeImageXBucketRetrievalUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        StorageData: {
            BucketName?: string | undefined;
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            ServiceId?: string | undefined;
            StorageType?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXAIRequestCntUsage
     */
    DescribeImageXAIRequestCntUsage: (requestData: types.DescribeImageXAIRequestCntUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RequestCntData: {
            AdvFeat?: string | undefined;
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            ServiceId?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXSummary
     */
    DescribeImageXSummary: (requestData: types.DescribeImageXSummaryQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        BaseOpData: {
            Value: number;
        };
        CdnBandwidthData: {
            Value: number;
        };
        CdnTrafficData: {
            Value: number;
        };
        RequestCntData: {
            Value: number;
        };
        StorageData: {
            Value: number;
        };
    }>>;
    /**
     * @function DescribeImageXDomainTrafficData
     */
    DescribeImageXDomainTrafficData: (requestData: types.DescribeImageXDomainTrafficDataQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TrafficData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DomainName?: string | undefined;
            ServiceId?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXDomainBandwidthData
     */
    DescribeImageXDomainBandwidthData: (requestData: types.DescribeImageXDomainBandwidthDataQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        BpsData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DomainName?: string | undefined;
            ServiceId?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXDomainBandwidthNinetyFiveData
     */
    DescribeImageXDomainBandwidthNinetyFiveData: (requestData: types.DescribeImageXDomainBandwidthNinetyFiveDataQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        BpsData: number;
        TimeStamp: string;
    }>>;
    /**
     * @function DescribeImageXBucketUsage
     */
    DescribeImageXBucketUsage: (requestData: types.DescribeImageXBucketUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        StorageData: {
            BucketName?: string | undefined;
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            ServiceId?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXBillingRequestCntUsage
     */
    DescribeImageXBillingRequestCntUsage: (requestData: types.DescribeImageXBillingRequestCntUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RequestCntData: {
            AdvFeat: string;
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
        }[];
    }>>;
    /**
     * @function DescribeImageXRequestCntUsage
     */
    DescribeImageXRequestCntUsage: (requestData: types.DescribeImageXRequestCntUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RequestCntData: {
            AdvFeat?: string | undefined;
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            ServiceId?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXBaseOpUsage
     */
    DescribeImageXBaseOpUsage: (requestData: types.DescribeImageXBaseOpUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        BaseOpData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            ServiceId?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXCompressUsage
     */
    DescribeImageXCompressUsage: (requestData: types.DescribeImageXCompressUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CompressData: {
            InSize: {
                TimeStamp: string;
                Value: number;
            }[];
            OutSize: {
                TimeStamp: string;
                Value: number;
            }[];
            ServiceId?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXScreenshotUsage
     */
    DescribeImageXScreenshotUsage: (requestData: types.DescribeImageXScreenshotUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ScreenshotData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
        }[];
    }>>;
    /**
     * @function DescribeImageXVideoClipDurationUsage
     */
    DescribeImageXVideoClipDurationUsage: (requestData: types.DescribeImageXVideoClipDurationUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        VideoClipDurationData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
        }[];
    }>>;
    /**
     * @function DescribeImageXMultiCompressUsage
     */
    DescribeImageXMultiCompressUsage: (requestData: types.DescribeImageXMultiCompressUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CompressData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
        }[];
    }>>;
    /**
     * @function DescribeImageXEdgeRequest
     */
    DescribeImageXEdgeRequest: (requestData: types.DescribeImageXEdgeRequestQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RequestCnt: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DataType?: string | undefined;
            DomainName?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXEdgeRequestBandwidth
     */
    DescribeImageXEdgeRequestBandwidth: (requestData: types.DescribeImageXEdgeRequestBandwidthQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        BpsData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DomainName?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXEdgeRequestTraffic
     */
    DescribeImageXEdgeRequestTraffic: (requestData: types.DescribeImageXEdgeRequestTrafficQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TrafficData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DomainName?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXEdgeRequestRegions
     */
    DescribeImageXEdgeRequestRegions: (requestData: types.DescribeImageXEdgeRequestRegionsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        UserCountry: string[];
        UserProvince: string[];
    }>>;
    /**
     * @function DescribeImageXMirrorRequestHttpCodeByTime
     */
    DescribeImageXMirrorRequestHttpCodeByTime: (requestData: types.DescribeImageXMirrorRequestHttpCodeByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Data: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            HttpCode: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXMirrorRequestHttpCodeOverview
     */
    DescribeImageXMirrorRequestHttpCodeOverview: (requestData: types.DescribeImageXMirrorRequestHttpCodeOverviewBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Data: {
            Count: number;
            Details: {
                HttpCode: string;
                Value: number;
            }[];
            Domain: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXMirrorRequestTraffic
     */
    DescribeImageXMirrorRequestTraffic: (requestData: types.DescribeImageXMirrorRequestTrafficBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Data: {
            TimeStamp: string;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXMirrorRequestBandwidth
     */
    DescribeImageXMirrorRequestBandwidth: (requestData: types.DescribeImageXMirrorRequestBandwidthBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Data: {
            TimeStamp: string;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXServerQPSUsage
     */
    DescribeImageXServerQPSUsage: (requestData: types.DescribeImageXServerQPSUsageQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        QPSData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            QPSType: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXHitRateTrafficData
     */
    DescribeImageXHitRateTrafficData: (requestData: types.DescribeImageXHitRateTrafficDataQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        HitRateData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DomainName?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXHitRateRequestData
     */
    DescribeImageXHitRateRequestData: (requestData: types.DescribeImageXHitRateRequestDataQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        HitRateData: {
            Data: {
                TimeStamp: string;
                Value: number;
            }[];
            DomainName?: string | undefined;
        }[];
    }>>;
    /**
     * @function DescribeImageXCDNTopRequestData
     */
    DescribeImageXCDNTopRequestData: (requestData: types.DescribeImageXCDNTopRequestDataQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Count: number;
        TopValue: {
            Key: string;
            Value: number;
        }[];
        TotalValue: number;
    }>>;
    /**
     * @function DescribeImageXHeifEncodeFileInSizeByTime
     */
    DescribeImageXHeifEncodeFileInSizeByTime: (requestData: types.DescribeImageXHeifEncodeFileInSizeByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FileSizeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXHeifEncodeFileOutSizeByTime
     */
    DescribeImageXHeifEncodeFileOutSizeByTime: (requestData: types.DescribeImageXHeifEncodeFileOutSizeByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FileSizeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXHeifEncodeSuccessCountByTime
     */
    DescribeImageXHeifEncodeSuccessCountByTime: (requestData: types.DescribeImageXHeifEncodeSuccessCountByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SuccessCountData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXHeifEncodeSuccessRateByTime
     */
    DescribeImageXHeifEncodeSuccessRateByTime: (requestData: types.DescribeImageXHeifEncodeSuccessRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SuccessRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXHeifEncodeDurationByTime
     */
    DescribeImageXHeifEncodeDurationByTime: (requestData: types.DescribeImageXHeifEncodeDurationByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DurationData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXHeifEncodeErrorCodeByTime
     */
    DescribeImageXHeifEncodeErrorCodeByTime: (requestData: types.DescribeImageXHeifEncodeErrorCodeByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ErrorCodeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            ErrorCode: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXExceedResolutionRatioAll
     */
    DescribeImageXExceedResolutionRatioAll: (requestData: types.DescribeImageXExceedResolutionRatioAllBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ResolutionRatioData: {
            Count: number;
            HeightRatio: number;
            Ratio: string;
            WidthRatio: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXExceedFileSize
     */
    DescribeImageXExceedFileSize: (requestData: types.DescribeImageXExceedFileSizeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FSizeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXExceedCountByTime
     */
    DescribeImageXExceedCountByTime: (requestData: types.DescribeImageXExceedCountByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ExceedCountData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXServiceQuality
     */
    DescribeImageXServiceQuality: (requestData: types.DescribeImageXServiceQualityQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CdnData: {
            AvgDuration: number;
            SuccessRate: number;
            TotalCount: number;
        };
        ClientData: {
            AvgDecodeDuration: number;
            AvgLoadDuration: number;
            AvgQueueDuration: number;
            SuccessRate: number;
            TotalCount: number;
        };
        FailureRate: number;
        UploadData: {
            AvgDuration: number;
            AvgSize: number;
            SuccessRate: number;
            TotalCount: number;
            UploadCount: number;
        };
    }>>;
    /**
     * @function GetImageXQueryApps
     */
    GetImageXQueryApps: (requestData: types.GetImageXQueryAppsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Apps: {
            AppId: string;
            AppName: string;
            AppRegion: string;
            BundleId: string;
            PackageName: string;
        }[];
    }>>;
    /**
     * @function GetImageXQueryRegions
     */
    GetImageXQueryRegions: (requestData: types.GetImageXQueryRegionsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Country: string[];
        Province: string[];
    }>>;
    /**
     * @function GetImageXQueryDims
     */
    GetImageXQueryDims: (requestData: types.GetImageXQueryDimsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Dim: string[];
    }>>;
    /**
     * @function GetImageXQueryVals
     */
    GetImageXQueryVals: (requestData: types.GetImageXQueryValsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DimVal: string[];
    }>>;
    /**
     * @function DescribeImageXUploadCountByTime
     */
    DescribeImageXUploadCountByTime: (requestData: types.DescribeImageXUploadCountByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        UploadCountData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXUploadDuration
     */
    DescribeImageXUploadDuration: (requestData: types.DescribeImageXUploadDurationBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DurationData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXUploadSuccessRateByTime
     */
    DescribeImageXUploadSuccessRateByTime: (requestData: types.DescribeImageXUploadSuccessRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SuccessRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXUploadFileSize
     */
    DescribeImageXUploadFileSize: (requestData: types.DescribeImageXUploadFileSizeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FSizeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXUploadErrorCodeByTime
     */
    DescribeImageXUploadErrorCodeByTime: (requestData: types.DescribeImageXUploadErrorCodeByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ErrorCodeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            ErrorCode: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXUploadErrorCodeAll
     */
    DescribeImageXUploadErrorCodeAll: (requestData: types.DescribeImageXUploadErrorCodeAllBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ErrorCodeData: {
            Details?: {
                ErrorCode: string;
                ErrorCodeDesc: string;
                Value: number;
            }[] | undefined;
            ErrorCode?: string | undefined;
            ErrorCodeDesc?: string | undefined;
            Isp?: string | undefined;
            Region?: string | undefined;
            RegionType?: string | undefined;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXUploadSpeed
     */
    DescribeImageXUploadSpeed: (requestData: types.DescribeImageXUploadSpeedBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SpeedData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXUploadSegmentSpeedByTime
     */
    DescribeImageXUploadSegmentSpeedByTime: (requestData: types.DescribeImageXUploadSegmentSpeedByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SpeedData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnSuccessRateByTime
     */
    DescribeImageXCdnSuccessRateByTime: (requestData: types.DescribeImageXCdnSuccessRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SuccessRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnSuccessRateAll
     */
    DescribeImageXCdnSuccessRateAll: (requestData: types.DescribeImageXCdnSuccessRateAllBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SuccessRateData: {
            Count: number;
            Domain?: string | undefined;
            Isp?: string | undefined;
            Region?: string | undefined;
            RegionType?: string | undefined;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnErrorCodeByTime
     */
    DescribeImageXCdnErrorCodeByTime: (requestData: types.DescribeImageXCdnErrorCodeByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ErrorCodeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            ErrorCode: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnErrorCodeAll
     */
    DescribeImageXCdnErrorCodeAll: (requestData: types.DescribeImageXCdnErrorCodeAllBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ErrorCodeData: {
            Details?: {
                ErrorCode: string;
                ErrorCodeDesc: string;
                Value: number;
            }[] | undefined;
            Domain?: string | undefined;
            ErrorCode?: string | undefined;
            ErrorCodeDesc?: string | undefined;
            Isp?: string | undefined;
            Region?: string | undefined;
            RegionType?: string | undefined;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnDurationDetailByTime
     */
    DescribeImageXCdnDurationDetailByTime: (requestData: types.DescribeImageXCdnDurationDetailByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DurationData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnDurationAll
     */
    DescribeImageXCdnDurationAll: (requestData: types.DescribeImageXCdnDurationAllBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DurationData: {
            Count: number;
            Domain?: string | undefined;
            Isp?: string | undefined;
            Region?: string | undefined;
            RegionType?: string | undefined;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnReuseRateByTime
     */
    DescribeImageXCdnReuseRateByTime: (requestData: types.DescribeImageXCdnReuseRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ReuseRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnReuseRateAll
     */
    DescribeImageXCdnReuseRateAll: (requestData: types.DescribeImageXCdnReuseRateAllBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ReuseRateData: {
            Count: number;
            Domain?: string | undefined;
            Isp?: string | undefined;
            Region?: string | undefined;
            RegionType?: string | undefined;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXCdnProtocolRateByTime
     */
    DescribeImageXCdnProtocolRateByTime: (requestData: types.DescribeImageXCdnProtocolRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ProtocolRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientFailureRate
     */
    DescribeImageXClientFailureRate: (requestData: types.DescribeImageXClientFailureRateBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FailureRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientDecodeSuccessRateByTime
     */
    DescribeImageXClientDecodeSuccessRateByTime: (requestData: types.DescribeImageXClientDecodeSuccessRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SuccessRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientDecodeDurationByTime
     */
    DescribeImageXClientDecodeDurationByTime: (requestData: types.DescribeImageXClientDecodeDurationByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DurationData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientQueueDurationByTime
     */
    DescribeImageXClientQueueDurationByTime: (requestData: types.DescribeImageXClientQueueDurationByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DurationData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientErrorCodeByTime
     */
    DescribeImageXClientErrorCodeByTime: (requestData: types.DescribeImageXClientErrorCodeByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ErrorCodeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            ErrorCode: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientErrorCodeAll
     */
    DescribeImageXClientErrorCodeAll: (requestData: types.DescribeImageXClientErrorCodeAllBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ErrorCodeData: {
            Details?: {
                ErrorCode: string;
                ErrorCodeDesc: string;
                Value: number;
            }[] | undefined;
            Domain?: string | undefined;
            ErrorCode?: string | undefined;
            ErrorCodeDesc?: string | undefined;
            Isp?: string | undefined;
            Region?: string | undefined;
            RegionType?: string | undefined;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientLoadDuration
     */
    DescribeImageXClientLoadDuration: (requestData: types.DescribeImageXClientLoadDurationBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DurationData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientLoadDurationAll
     */
    DescribeImageXClientLoadDurationAll: (requestData: types.DescribeImageXClientLoadDurationAllBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DurationData: {
            Count: number;
            Domain?: string | undefined;
            Isp?: string | undefined;
            Region?: string | undefined;
            RegionType?: string | undefined;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientSdkVerByTime
     */
    DescribeImageXClientSdkVerByTime: (requestData: types.DescribeImageXClientSdkVerByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SdkVerData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            SdkVer: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientFileSize
     */
    DescribeImageXClientFileSize: (requestData: types.DescribeImageXClientFileSizeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FSizeData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientTopFileSize
     */
    DescribeImageXClientTopFileSize: (requestData: types.DescribeImageXClientTopFileSizeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TopUrlData: {
            Count: number;
            Url: string;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientCountByTime
     */
    DescribeImageXClientCountByTime: (requestData: types.DescribeImageXClientCountByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ClientCountData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientQualityRateByTime
     */
    DescribeImageXClientQualityRateByTime: (requestData: types.DescribeImageXClientQualityRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        QualityRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientTopQualityURL
     */
    DescribeImageXClientTopQualityURL: (requestData: types.DescribeImageXClientTopQualityURLBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TopUrlData: {
            Count: number;
            Url: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientDemotionRateByTime
     */
    DescribeImageXClientDemotionRateByTime: (requestData: types.DescribeImageXClientDemotionRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DemotionRateData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientTopDemotionURL
     */
    DescribeImageXClientTopDemotionURL: (requestData: types.DescribeImageXClientTopDemotionURLBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TopUrlData: {
            Count: number;
            Url: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXClientScoreByTime
     */
    DescribeImageXClientScoreByTime: (requestData: types.DescribeImageXClientScoreByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ScoreData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXSensibleCountByTime
     */
    DescribeImageXSensibleCountByTime: (requestData: types.DescribeImageXSensibleCountByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        SensibleCountData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXSensibleCacheHitRateByTime
     */
    DescribeImageXSensibleCacheHitRateByTime: (requestData: types.DescribeImageXSensibleCacheHitRateByTimeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CacheHitData: {
            Count: number;
            Data: {
                Count: number;
                Timestamp: string;
                Value: number;
            }[];
            Type: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXSensibleTopSizeURL
     */
    DescribeImageXSensibleTopSizeURL: (requestData: types.DescribeImageXSensibleTopSizeURLBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TopUrlData: {
            ActivityViewTree: string;
            BizTag: string;
            Count: number;
            URL: string;
            Value: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXSensibleTopResolutionURL
     */
    DescribeImageXSensibleTopResolutionURL: (requestData: types.DescribeImageXSensibleTopResolutionURLBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TopUrlData: {
            ActivityViewTree: string;
            BizTag: string;
            Count: number;
            ImageHeight: number;
            ImageWidth: number;
            URL: string;
            ViewHeight: number;
            ViewWidth: number;
        }[];
    }>>;
    /**
     * @function DescribeImageXSensibleTopRamURL
     */
    DescribeImageXSensibleTopRamURL: (requestData: types.DescribeImageXSensibleTopRamURLBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TopUrlData: {
            ActivityViewTree: string;
            BizTag: string;
            Count: number;
            RamSize: number;
            URL: string;
        }[];
    }>>;
    /**
     * @function DescribeImageXSensibleTopUnknownURL
     */
    DescribeImageXSensibleTopUnknownURL: (requestData: types.DescribeImageXSensibleTopUnknownURLBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TopUrlData: {
            ActivityViewTree?: string | undefined;
            BizTag?: string | undefined;
            Count?: number | undefined;
            FileSize?: number | undefined;
            ImageHeight?: number | undefined;
            ImageWidth?: number | undefined;
            RamSize?: number | undefined;
            URL?: string | undefined;
            ViewHeight?: number | undefined;
            ViewWidth?: number | undefined;
        }[];
    }>>;
    /**
     * @function CreateBatchProcessTask
     */
    CreateBatchProcessTask: (requestData: types.CreateBatchProcessTaskQuery & types.CreateBatchProcessTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TaskId: string;
    } | undefined>>;
    /**
     * @function GetBatchProcessResult
     */
    GetBatchProcessResult: (requestData: types.GetBatchProcessResultQuery & types.GetBatchProcessResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Data: {
            Action: string;
            Err?: string | undefined;
            Size?: number | undefined;
            StatusCode?: number | undefined;
            Url: string;
        }[];
    } | undefined>>;
    /**
     * @function GetBatchTaskInfo
     */
    GetBatchTaskInfo: (requestData: types.GetBatchTaskInfoQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Callback?: string | undefined;
        CallbackBody?: string | undefined;
        CallbackBodyType?: string | undefined;
        Code?: number | undefined;
        Data?: {
            Action: string;
            Err?: string | undefined;
            Size?: number | undefined;
            StatusCode?: number | undefined;
            Url: string;
        }[] | undefined;
        Err?: string | undefined;
        Status?: string | undefined;
        TaskId: string;
    } | undefined>>;
    /**
     * @function AIProcess
     */
    AIProcess: (requestData: types.AIProcessBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Output: string;
    }>>;
    /**
     * @function CreateImageAITask
     */
    CreateImageAITask: (requestData: types.CreateImageAITaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        QueueId: string;
        TaskId: string;
    }>>;
    /**
     * @function GetImageAITasks
     */
    GetImageAITasks: (requestData: types.GetImageAITasksQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        HasMore: boolean;
        Marker?: string | undefined;
        QueueId: string;
        TaskInfo: {
            EndAt: string;
            Fail: number;
            Retry: number;
            StartAt: string;
            Status: string;
            SubmitAt: string;
            Success: number;
            TaskId: string;
            Total: number;
        }[];
    }>>;
    /**
     * @function GetImageAIDetails
     */
    GetImageAIDetails: (requestData: types.GetImageAIDetailsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ExecInfo: {
            EndAt?: string | undefined;
            EntryId?: string | undefined;
            ExecInput?: {
                ObjectKey: string;
            } | undefined;
            ExecOutput?: {
                ErrCode: string;
                ErrMsg: string;
                Output: string;
            } | undefined;
            StartAt?: string | undefined;
            Status?: string | undefined;
            SubmitAt?: string | undefined;
        }[];
        Total: number;
    }>>;
    /**
     * @function UpdateImageResourceStatus
     */
    UpdateImageResourceStatus: (requestData: types.UpdateImageResourceStatusQuery & types.UpdateImageResourceStatusBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateFileStorageClass
     */
    UpdateFileStorageClass: (requestData: types.UpdateFileStorageClassQuery & types.UpdateFileStorageClassBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function GetImageStorageFiles
     */
    GetImageStorageFiles: (requestData: types.GetImageStorageFilesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CommonPrefix: string[];
        HasMore: boolean;
        Items: {
            FileSize?: number | undefined;
            Key?: string | undefined;
            LastModified?: string | undefined;
            StorageClass?: string | undefined;
            StoreUri?: string | undefined;
        }[];
        Marker: string;
    }>>;
    /**
     * @function DeleteImageUploadFiles
     */
    DeleteImageUploadFiles: (requestData: types.DeleteImageUploadFilesQuery & types.DeleteImageUploadFilesBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DeletedFiles: string[];
        DeletedFilesVersion?: string[] | undefined;
        InvaildFiles: string[];
        InvaildFilesVersion?: string[] | undefined;
    } | undefined>>;
    /**
     * @function CreateFileRestore
     */
    CreateFileRestore: (requestData: types.CreateFileRestoreQuery & types.CreateFileRestoreBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageUploadFiles
     */
    UpdateImageUploadFiles: (requestData: types.UpdateImageUploadFilesQuery & types.UpdateImageUploadFilesBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FailUrls: string[];
        ImageUrls: string[];
    } | undefined>>;
    /**
     * @function CommitImageUpload
     */
    CommitImageUpload: (requestData: types.CommitImageUploadQuery & types.CommitImageUploadBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        PluginResult?: {
            ImageMd5?: string | undefined;
            FileName?: string | undefined;
            FrameCnt?: number | undefined;
            ImageFormat?: string | undefined;
            ImageHeight?: number | undefined;
            ImageSize?: number | undefined;
            ImageUri: string;
            ImageWidth?: number | undefined;
        }[] | undefined;
        RequestId: string;
        Results: {
            Encryption?: {
                SourceMd5: string;
                Algorithm: string;
                Extra: Record<string, string>;
                SecretKey: string;
                Uri: string;
                Version: string;
            } | undefined;
            ImageMeta?: {
                Field75: number;
                Md5: string;
                Format: string;
                Height: number;
                Size: number;
                Uri: string;
            } | undefined;
            Uri: string;
            UriStatus: number;
        }[];
    }>>;
    /**
     * @function UpdateImageFileCT
     */
    UpdateImageFileCT: (requestData: types.UpdateImageFileCTQuery & types.UpdateImageFileCTBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function ApplyVpcUploadInfo
     */
    ApplyVpcUploadInfo: (requestData: types.ApplyVpcUploadInfoQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Oid: string;
        PartUploadInfo: {
            CompletePartURL: string;
            CompletePartURLHeaders: {
                Key: string;
                Value: string;
            }[];
            PartPutURLs: string[];
            PartSize: number;
        };
        PutURL: string;
        PutURLHeaders: {
            Key: string;
            Value: string;
        }[];
        SessionKey: string;
        UploadMode: string;
    } | undefined>>;
    /**
     * @function ApplyImageUpload
     */
    ApplyImageUpload: (requestData: types.ApplyImageUploadQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RequestId: string;
        UploadAddress: {
            /**
             * @function CreateImageSettingRule
             */
            SessionKey: string;
            StoreInfos: {
                Auth: string;
                StoreUri: string;
            }[];
            UploadHosts: string[];
        };
    }>>;
    /**
     * @function GetImageUploadFile
     */
    GetImageUploadFile: (requestData: types.GetImageUploadFileQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Disabled?: boolean | undefined;
        FileSize?: number | undefined;
        LastModified?: string | undefined;
        RestoreExpiryDate?: string | undefined;
        RestoreRequestDate?: string | undefined;
        RestoreTier?: string | undefined;
        Restoring?: boolean | undefined;
        ServiceId?: string | undefined;
        StorageClass?: string | undefined;
        StorageContentType?: string | undefined;
        StoreUri?: string | undefined;
    } | undefined>>;
    /**
     * @function GetImageUploadFiles
     */
    GetImageUploadFiles: (requestData: types.GetImageUploadFilesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FileObjects: {
            FileSize?: number | undefined;
            LastModified?: string | undefined;
            Marker?: number | undefined;
            StoreUri?: string | undefined;
        }[];
        ServiceId: string;
        Status: string;
        hasMore: boolean;
    }>>;
    /**
     * @function GetImageUpdateFiles
     */
    GetImageUpdateFiles: (requestData: types.GetImageUpdateFilesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ServiceId: string;
        Status: string;
        Total: number;
        UpdateUrls: {
            ImageUrl: string;
            UpdateAt: string;
        }[];
    } | undefined>>;
    /**
     * @function PreviewImageUploadFile
     */
    PreviewImageUploadFile: (requestData: types.PreviewImageUploadFileQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ImageDuration?: number | undefined;
        ImageFormat: string;
        ImageFrames: number;
        ImageHeight: number;
        ImageSize: number;
        ImageWidth: number;
        ServiceId: string;
        StorageContentType: string;
        StoreUri: string;
    } | undefined>>;
    /**
     * @function GetImageService
     */
    GetImageService: (requestData: types.GetImageServiceQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        StorageRulesV2?: {
            AbortIncompleteMultipartUpload?: {
                DaysAfterInitiation?: number | undefined;
            } | undefined;
            Enable: boolean;
            Event: string;
            Expiration?: {
                Date?: string | undefined;
                Days?: number | undefined;
            } | undefined;
            Filter?: {
                GreaterThanIncludeEqual?: string | undefined;
                LessThanIncludeEqual?: string | undefined;
                ObjectSizeGreaterThan?: number | undefined;
                ObjectSizeLessThan?: number | undefined;
            } | undefined;
            Id: string;
            NonCurrentVersionExpiration?: {
                NonCurrentDate?: string | undefined;
                NonCurrentDays?: number | undefined;
            } | undefined;
            NonCurrentVersionTransitions?: {
                NonCurrentDate?: string | undefined;
                NonCurrentDays?: number | undefined;
                StorageClass: string;
            }[] | undefined;
            Prefix: string;
            Transitions?: {
                Date?: string | undefined;
                Days?: number | undefined;
                StorageClass: string;
            }[] | undefined;
        }[] | undefined;
        AllowBkts: string[];
        AllowMirrorTypes: boolean;
        CompactURL: boolean;
        CreateAt: string;
        DomainInfos: {
            CNAME: string;
            DomainName: string;
            IsDefault: boolean;
            Status: string;
            UrlAuth: boolean;
        }[];
        EventRules?: {
            CallbackUrl: string;
            Enable: boolean;
            EventType: string[];
            Id: string;
            MatchRule: string;
        }[] | undefined;
        HasSigkey: boolean;
        ImageY: boolean;
        ImageYAttribute: {
            ImageProtect: boolean;
            ImageStyleSeparators: string[];
            QnCosPreference: string;
            QueryStyleCombine: boolean;
        };
        Mirror: {
            Headers: Record<string, string>;
            Host: string;
            Hosts: Record<string, number>;
            Schema: string;
            Source: string;
        };
        ObjectAccess: boolean;
        PrimaryKey: string;
        ProjectName?: string | undefined;
        ResourceLimitedVisit: {
            AllowDomains: string[];
            Enable: boolean;
        };
        ResourceTags?: {
            Key: string;
            Value: string;
        }[] | undefined;
        RsaPublicKey?: string | undefined;
        SecondaryKey: string;
        ServiceId: string;
        ServiceName: string;
        ServiceRegion: string;
        ServiceStatus: string;
        ServiceType: string;
        Storage: {
            AllTypes: boolean;
            BktName: string;
            TTL: number;
        };
        StorageRules?: {
            Action?: string | undefined;
            Day?: number | undefined;
            Enable: boolean;
            Event: string;
            NonCurrentAction?: string | undefined;
            NonCurrentDay?: number | undefined;
            Prefix?: string | undefined;
        }[] | undefined;
        StorageVersioning?: number | undefined;
        TemplatePrefix: string;
        UploadOverwrite?: boolean | undefined;
        VodSpace?: {
            Bucket: string;
            Region: string;
            SpaceName: string;
        } | undefined;
    } | undefined>>;
    /**
     * @function GetAllImageServices
     */
    GetAllImageServices: (requestData: types.GetAllImageServicesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Services: {
            AllowBkts: string[];
            AllowMirrorTypes: boolean;
            CompactURL: boolean;
            CreateAt: string;
            DomainInfos: {
                CNAME: string;
                DomainName: string;
                IsDefault: boolean;
                Status: string;
                UrlAuth: boolean;
            }[];
            EventRules?: {
                CallbackUrl: string;
                Enable: boolean;
                EventType: string[];
                Id: string;
                MatchRule: string;
            }[] | undefined;
            HasSigkey: boolean;
            ImageY: boolean;
            ImageYAttribute: {
                ImageProtect: boolean;
                ImageStyleSeparators: string[];
                QnCosPreference: string;
                QueryStyleCombine: boolean;
            };
            Mirror: {
                Headers: Record<string, string>;
                Host: string;
                Hosts: Record<string, number>;
                Schema: string;
                Source: string;
            };
            ObjectAccess: boolean;
            PrimaryKey: string;
            ProjectName: string;
            ResourceLimitedVisit: {
                AllowDomains: string[];
                Enable: boolean;
            };
            ResourceTags: {
                Key: string;
                Value: string;
            }[];
            SecondaryKey: string;
            ServiceId: string;
            ServiceName: string;
            ServiceRegion: string;
            ServiceStatus: string;
            ServiceType: string;
            Storage: {
                AllTypes: boolean;
                BktName: string;
                TTL: number;
            };
            StorageRules?: {
                Action?: string | undefined;
                Day?: number | undefined;
                Enable: boolean;
                Event: string;
                NonCurrentAction?: string | undefined;
                NonCurrentDay?: number | undefined;
                Prefix: string;
            }[] | undefined;
            StorageVersioning?: number | undefined;
            TemplatePrefix: string;
            UploadOverwrite: boolean;
            VodSpace: {
                Bucket: string;
                Region: string;
                SpaceName: string;
            };
        }[];
    } | undefined>>;
    /**
     * @function CreateImageCompressTask
     */
    CreateImageCompressTask: (requestData: types.CreateImageCompressTaskQuery & types.CreateImageCompressTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TaskId: string;
    } | undefined>>;
    /**
     * @function FetchImageUrl
     */
    FetchImageUrl: (requestData: types.FetchImageUrlBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Duration?: number | undefined;
        EndTime?: number | undefined;
        FSize?: number | undefined;
        FrameCnt?: number | undefined;
        ImageFormat?: string | undefined;
        ImageHeight?: number | undefined;
        ImageWidth?: number | undefined;
        StartTime?: number | undefined;
        StoreUri?: string | undefined;
        TaskId?: string | undefined;
        TimeCost?: number | undefined;
        Url: string;
    } | undefined>>;
    /**
     * @function UpdateImageStorageTTL
     */
    UpdateImageStorageTTL: (requestData: types.UpdateImageStorageTTLBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function GetCompressTaskInfo
     */
    GetCompressTaskInfo: (requestData: types.GetCompressTaskInfoQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ErrCode?: number | undefined;
        ErrMsg?: string | undefined;
        OutputUri: string;
        ProcessCount?: number | undefined;
        ResUri?: string | undefined;
        Status: string;
        TaskId: string;
    } | undefined>>;
    /**
     * @function GetUrlFetchTask
     */
    GetUrlFetchTask: (requestData: types.GetUrlFetchTaskQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Callback?: string | undefined;
        CallbackBody?: string | undefined;
        CallbackBodyType?: string | undefined;
        Code?: number | undefined;
        Err?: string | undefined;
        Id: string;
        Status: string;
        StoreUri?: string | undefined;
        Url: string;
    } | undefined>>;
    /**
     * @function GetResourceURL
     */
    GetResourceURL: (requestData: types.GetResourceURLQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CompactURL: string;
        ObjCompactURL: string;
        ObjURL: string;
        URL: string;
    } | undefined>>;
    /**
     * @function CreateImageFromUri
     */
    CreateImageFromUri: (requestData: types.CreateImageFromUriQuery & types.CreateImageFromUriBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DstUri: string;
        StoreUri: string;
    } | undefined>>;
    /**
     * @function UpdateImageFileKey
     */
    UpdateImageFileKey: (requestData: types.UpdateImageFileKeyQuery & types.UpdateImageFileKeyBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function CreateImageContentTask
     */
    CreateImageContentTask: (requestData: types.CreateImageContentTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Msg: string;
        TaskId: string;
    } | undefined>>;
    /**
     * @function GetImageContentTaskDetail
     */
    GetImageContentTaskDetail: (requestData: types.GetImageContentTaskDetailBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Data: {
            CreateTime: number;
            Msg: string;
            Process: string;
            State: string;
            TaskId: string;
            TaskType: string;
            UpdateTime: number;
            Url: string;
        }[];
        PageNum: number;
        PageSize: number;
        Total: number;
    }>>;
    /**
     * @function GetImageContentBlockList
     */
    GetImageContentBlockList: (requestData: types.GetImageContentBlockListBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Data: {
            CreateTime: number;
            Msg: string;
            Process: string;
            State: string;
            TaskType: string;
            UpdateTime: number;
            Url: string;
        }[];
        PageNum: number;
        PageSize: number;
        Total: number;
    }>>;
    /**
     * @function CreateImageTranscodeQueue
     */
    CreateImageTranscodeQueue: (requestData: types.CreateImageTranscodeQueueBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        QueueId: string;
    }>>;
    /**
     * @function DeleteImageTranscodeQueue
     */
    DeleteImageTranscodeQueue: (requestData: types.DeleteImageTranscodeQueueBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function UpdateImageTranscodeQueue
     */
    UpdateImageTranscodeQueue: (requestData: types.UpdateImageTranscodeQueueBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function UpdateImageTranscodeQueueStatus
     */
    UpdateImageTranscodeQueueStatus: (requestData: types.UpdateImageTranscodeQueueStatusBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function GetImageTranscodeQueues
     */
    GetImageTranscodeQueues: (requestData: types.GetImageTranscodeQueuesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Queues: {
            CallbackConf: {
                Args?: string | undefined;
                DataFormat: string;
                Endpoint: string;
                Method: string;
            };
            CreateAt: string;
            Desc: string;
            EnableCallback: boolean;
            Id: string;
            Name: string;
            Status: types.GetImageTranscodeQueuesResStatusEnum;
            Type: types.GetImageTranscodeQueuesResTypeEnum;
        }[];
        Total: number;
    } | undefined>>;
    /**
     * @function CreateImageTranscodeTask
     */
    CreateImageTranscodeTask: (requestData: types.CreateImageTranscodeTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TaskId: string;
    }>>;
    /**
     * @function GetImageTranscodeDetails
     */
    GetImageTranscodeDetails: (requestData: types.GetImageTranscodeDetailsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ExecInfo: {
            EndAt?: string | undefined;
            EntryId?: string | undefined;
            ExecInput?: {
                Image: string;
                Template: string;
            } | undefined;
            ExecOutput?: {
                ErrCode: string;
                ErrMsg: string;
                Evals: {
                    Format: string;
                    Index: number;
                    Name: string;
                    Phase: string;
                    Size: number;
                    Value: {
                        Aesthetic: number;
                        Noise: number;
                        PSNR: number;
                        SSIM: number;
                        VMAF: number;
                        VQScore: number;
                    };
                }[];
                Format: string;
                Output: string;
                Size: number;
            } | undefined;
            StartAt?: string | undefined;
            Status?: string | undefined;
            SubmitAt?: string | undefined;
        }[];
        Total: number;
    }>>;
    /**
     * @function CreateImageTranscodeCallback
     */
    CreateImageTranscodeCallback: (requestData: types.CreateImageTranscodeCallbackBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function DeleteImageTranscodeDetail
     */
    DeleteImageTranscodeDetail: (requestData: types.DeleteImageTranscodeDetailBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function GetImagePSDetection
     */
    GetImagePSDetection: (requestData: types.GetImagePSDetectionQuery & types.GetImagePSDetectionBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ElaImage: string;
        HeImage: string;
        Label: number;
        NaImage: string;
        Score: number;
    } | undefined>>;
    /**
     * @function GetImageEraseResult
     */
    GetImageEraseResult: (requestData: types.GetImageEraseResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetImageSuperResolutionResult
     */
    GetImageSuperResolutionResult: (requestData: types.GetImageSuperResolutionResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetDenoisingImage
     */
    GetDenoisingImage: (requestData: types.GetDenoisingImageQuery & types.GetDenoisingImageBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Demotion: boolean;
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetImageDuplicateDetection
     */
    GetImageDuplicateDetection: (requestData: types.GetImageDuplicateDetectionQuery & types.GetImageDuplicateDetectionBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Callback?: string | undefined;
        Groups?: Record<string, string[]> | undefined;
        Score?: string | undefined;
        TaskId?: string | undefined;
    } | undefined>>;
    /**
     * @function GetImageOCRV2
     */
    GetImageOCRV2: (requestData: types.GetImageOCRV2Query & types.GetImageOCRV2Body, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DefectResult?: {
            ClassLabel?: number | undefined;
            Location?: number[] | undefined;
        }[] | undefined;
        Extra?: {
            Info?: string | undefined;
            Message?: string | undefined;
            Status?: number | undefined;
        } | undefined;
        ExtraOutput?: {
            Info?: Record<string, unknown> | undefined;
            Message?: string | undefined;
            Status?: number | undefined;
        } | undefined;
        GeneralResult?: {
            Confidence: string;
            Content: string;
            Location: number[][];
        }[] | undefined;
        InstructmentResult?: string | undefined;
        LicenseResult?: Record<string, {
            Content: string;
            Location: number[];
        }> | undefined;
        Scene: string;
    } | undefined>>;
    /**
     * @function GetImageBgFillResult
     */
    GetImageBgFillResult: (requestData: types.GetImageBgFillResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetSegmentImage
     */
    GetSegmentImage: (requestData: types.GetSegmentImageQuery & types.GetSegmentImageBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetImageSmartCropResult
     */
    GetImageSmartCropResult: (requestData: types.GetImageSmartCropResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Demotioned: boolean;
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetImageComicResult
     */
    GetImageComicResult: (requestData: types.GetImageComicResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetImageEnhanceResult
     */
    GetImageEnhanceResult: (requestData: types.GetImageEnhanceResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Method: string;
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetImageQuality
     */
    GetImageQuality: (requestData: types.GetImageQualityQuery & types.GetImageQualityBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FrScoreResult: {
            Psnr: number;
            Ssim: number;
            Vmaf: number;
        };
        FrScores: {
            psnr: number;
            ssim: number;
            vmaf: number;
        };
        NrScoreResult: {
            AdvColor: number;
            Aesthetic: number;
            Blockiness: number;
            Blur: number;
            Brightness: number;
            Cg: number;
            CmArtifact: number;
            Contrast: number;
            Green: number;
            Hue: number;
            Noise: number;
            OverExposure: number;
            Saturation: number;
            TextQualityScore: number;
            Texture: number;
            VqScore: number;
        };
        NrScores: {
            advcolor: number;
            aesthetic: number;
            blockiness: number;
            blur: number;
            brightness: number;
            cg: number;
            cmartifact: number;
            colorfulness: number;
            contrast: number;
            green: number;
            hue: number;
            noise: number;
            overexposure: number;
            saturation: number;
            texture: number;
            vqscore: number;
        };
        VqType: string;
    }>>;
    /**
     * @function GetLicensePlateDetection
     */
    GetLicensePlateDetection: (requestData: types.GetLicensePlateDetectionQuery & types.GetLicensePlateDetectionBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Locations: {
            X1: number;
            X2: number;
            Y1: number;
            Y2: number;
        }[];
    } | undefined>>;
    /**
     * @function GetPrivateImageType
     */
    GetPrivateImageType: (requestData: types.GetPrivateImageTypeQuery & types.GetPrivateImageTypeBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Cloth: number;
        Face: number;
    } | undefined>>;
    /**
     * @function CreateCVImageGenerateTask
     */
    CreateCVImageGenerateTask: (requestData: types.CreateCVImageGenerateTaskQuery & types.CreateCVImageGenerateTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RespJson: Record<string, Record<string, unknown>>;
        TaskId: string;
    } | undefined>>;
    /**
     * @function CreateHiddenWatermarkImage
     */
    CreateHiddenWatermarkImage: (requestData: types.CreateHiddenWatermarkImageQuery & types.CreateHiddenWatermarkImageBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        StoreUri: string;
    } | undefined>>;
    /**
     * @function UpdateImageExifData
     */
    UpdateImageExifData: (requestData: types.UpdateImageExifDataQuery & types.UpdateImageExifDataBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DstUri: string;
    }>>;
    /**
     * @function GetImageDetectResult
     */
    GetImageDetectResult: (requestData: types.GetImageDetectResultQuery & types.GetImageDetectResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        DetectType: string;
        Faces: {
            Box: number[];
            Score: number;
        }[];
    } | undefined>>;
    /**
     * @function GetCVImageGenerateResult
     */
    GetCVImageGenerateResult: (requestData: types.GetCVImageGenerateResultQuery & types.GetCVImageGenerateResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ImageUrls: string[];
        RespJson: Record<string, Record<string, unknown>>;
        StoreUris: string[];
    } | undefined>>;
    /**
     * @function CreateImageHmExtract
     */
    CreateImageHmExtract: (requestData: types.CreateImageHmExtractQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        AdditionInfo?: {
            HmCode?: number | undefined;
            HmDateInfo?: {
                EndDate?: number | undefined;
                StartDate?: number | undefined;
            } | undefined;
            HmType?: string | undefined;
        } | undefined;
        Info: string;
        StatusCode: number;
    }>>;
    /**
     * @function GetCVTextGenerateImage
     */
    GetCVTextGenerateImage: (requestData: types.GetCVTextGenerateImageQuery & types.GetCVTextGenerateImageBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ImageUrls: string[];
        RespJson: Record<string, Record<string, unknown>>;
        StoreUris: string[];
    } | undefined>>;
    /**
     * @function GetCVImageGenerateTask
     */
    GetCVImageGenerateTask: (requestData: types.GetCVImageGenerateTaskQuery & types.GetCVImageGenerateTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ImageUrls: string[];
        RespJson: Record<string, Record<string, unknown>>;
        Status: string;
        StoreUris: string[];
        TaskId: string;
    } | undefined>>;
    /**
     * @function CreateImageHmEmbed
     */
    CreateImageHmEmbed: (requestData: types.CreateImageHmEmbedBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        StoreUri: string;
    } | undefined>>;
    /**
     * @function GetCVAnimeGenerateImage
     */
    GetCVAnimeGenerateImage: (requestData: types.GetCVAnimeGenerateImageQuery & types.GetCVAnimeGenerateImageBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ImageUrls: string[];
        RespJson: Record<string, Record<string, unknown>>;
        StoreUris: string[];
    } | undefined>>;
    /**
     * @function GetComprehensiveEnhanceImage
     */
    GetComprehensiveEnhanceImage: (requestData: types.GetComprehensiveEnhanceImageBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ResUri: string;
    } | undefined>>;
    /**
     * @function GetImageAiGenerateTask
     */
    GetImageAiGenerateTask: (requestData: types.GetImageAiGenerateTaskQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        AestheticScores: number[];
        SDScores: number[];
        Status: string;
        Uris: string[];
    } | undefined>>;
    /**
     * @function GetProductAIGCResult
     */
    GetProductAIGCResult: (requestData: types.GetProductAIGCResultQuery & types.GetProductAIGCResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        AestheticScores?: number[] | undefined;
        AigcImageScores?: Record<string, number[]> | undefined;
        BackgroundImages?: string[] | undefined;
        ComposedJsons?: Record<string, Record<string, unknown>>[] | undefined;
        Extra?: string | undefined;
        SDScores?: number[] | undefined;
        SellingPointRenderTemplate?: string | undefined;
        SellingPointText?: string | undefined;
        SellpointImages?: string[] | undefined;
    } | undefined>>;
    /**
     * @function GetImageEraseModels
     */
    GetImageEraseModels: (requestData: types.GetImageEraseModelsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Models: string[];
    } | undefined>>;
    /**
     * @function GetDedupTaskStatus
     */
    GetDedupTaskStatus: (requestData: types.GetDedupTaskStatusQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Groups: Record<string, string[]>;
        Score: string;
        Status: number;
        TaskId: string;
    } | undefined>>;
    /**
     * @function CreateImageService
     */
    CreateImageService: (requestData: types.CreateImageServiceBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ServiceId: string;
        ServiceName: string;
    }>>;
    /**
     * @function DeleteImageService
     */
    DeleteImageService: (requestData: types.DeleteImageServiceQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageAuthKey
     */
    UpdateImageAuthKey: (requestData: types.UpdateImageAuthKeyQuery & types.UpdateImageAuthKeyBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateResEventRule
     */
    UpdateResEventRule: (requestData: types.UpdateResEventRuleQuery & types.UpdateResEventRuleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateServiceName
     */
    UpdateServiceName: (requestData: types.UpdateServiceNameQuery & types.UpdateServiceNameBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateStorageRules
     */
    UpdateStorageRules: (requestData: types.UpdateStorageRulesQuery & types.UpdateStorageRulesBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateStorageRulesV2
     */
    UpdateStorageRulesV2: (requestData: types.UpdateStorageRulesV2Query & types.UpdateStorageRulesV2Body, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageObjectAccess
     */
    UpdateImageObjectAccess: (requestData: types.UpdateImageObjectAccessQuery & types.UpdateImageObjectAccessBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageUploadOverwrite
     */
    UpdateImageUploadOverwrite: (requestData: types.UpdateImageUploadOverwriteQuery & types.UpdateImageUploadOverwriteBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function UpdateImageMirrorConf
     */
    UpdateImageMirrorConf: (requestData: types.UpdateImageMirrorConfQuery & types.UpdateImageMirrorConfBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function GetImageServiceSubscription
     */
    GetImageServiceSubscription: (requestData: types.GetImageServiceSubscriptionQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        AccountId: string;
        BeginTime: string;
        BusinessStatus: number;
        Configuration: string;
        ExpiredTime: string;
        InstanceId: string;
        InstanceType: number;
        Product: string;
        Status: number;
    }>>;
    /**
     * @function GetImageAuthKey
     */
    GetImageAuthKey: (requestData: types.GetImageAuthKeyQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        PrimaryKey: string;
        SecondaryKey: string;
        ServiceId: string;
    } | undefined>>;
    /**
     * @function CreateImageAnalyzeTask
     */
    CreateImageAnalyzeTask: (requestData: types.CreateImageAnalyzeTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TaskId: string;
    }>>;
    /**
     * @function DeleteImageAnalyzeTaskRun
     */
    DeleteImageAnalyzeTaskRun: (requestData: types.DeleteImageAnalyzeTaskRunBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function DeleteImageAnalyzeTask
     */
    DeleteImageAnalyzeTask: (requestData: types.DeleteImageAnalyzeTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function UpdateImageAnalyzeTaskStatus
     */
    UpdateImageAnalyzeTaskStatus: (requestData: types.UpdateImageAnalyzeTaskStatusBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function UpdateImageAnalyzeTask
     */
    UpdateImageAnalyzeTask: (requestData: types.UpdateImageAnalyzeTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function GetImageAnalyzeTasks
     */
    GetImageAnalyzeTasks: (requestData: types.GetImageAnalyzeTasksQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Tasks: {
            CreateAt?: string | undefined;
            Desc?: string | undefined;
            EvalPerStage?: boolean | undefined;
            EvalStages: string[];
            Id: string;
            Name?: string | undefined;
            ResUri?: string[] | undefined;
            SampleRate?: number | undefined;
            ServiceId?: string | undefined;
            Status?: string | undefined;
            TaskId?: string | undefined;
            Tpl?: string | undefined;
            Type?: string | undefined;
            UpdateAt: string;
            VqTypes: string[];
        }[];
        Total: number;
    }>>;
    /**
     * @function GetImageAnalyzeResult
     */
    GetImageAnalyzeResult: (requestData: types.GetImageAnalyzeResultQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Results: {
            ResultUri?: string | undefined;
            RunId?: string | undefined;
            StartAt?: string | undefined;
            Status?: string | undefined;
        }[];
        Total: number;
    }>>;
    /**
     * @function DeleteImageElements
     */
    DeleteImageElements: (requestData: types.DeleteImageElementsBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FailedList: string[];
    } | undefined>>;
    /**
     * @function DeleteImageBackgroundColors
     */
    DeleteImageBackgroundColors: (requestData: types.DeleteImageBackgroundColorsBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FailedList: string[];
    } | undefined>>;
    /**
     * @function DeleteImageStyle
     */
    DeleteImageStyle: (requestData: types.DeleteImageStyleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function CreateImageStyle
     */
    CreateImageStyle: (requestData: types.CreateImageStyleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        StyleId: string;
    } | undefined>>;
    /**
     * @function UpdateImageStyleMeta
     */
    UpdateImageStyleMeta: (requestData: types.UpdateImageStyleMetaBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown> | undefined>>;
    /**
     * @function AddImageElements
     */
    AddImageElements: (requestData: types.AddImageElementsBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FailedList: string[];
    } | undefined>>;
    /**
     * @function AddImageBackgroundColors
     */
    AddImageBackgroundColors: (requestData: types.AddImageBackgroundColorsBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        FailedList: string[];
    } | undefined>>;
    /**
     * @function UpdateImageStyle
     */
    UpdateImageStyle: (requestData: types.UpdateImageStyleBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        BaseResp?: {
            Extra?: string | undefined;
            StatusCode?: number | undefined;
            StatusMessage?: string | undefined;
        } | undefined;
        CollectResult?: string | undefined;
    } | undefined>>;
    /**
     * @function GetImageFonts
     */
    GetImageFonts: (requestData: Record<string, any>, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Fonts: {
            Font: string;
            Name: string;
            Uri: string;
        }[];
    } | undefined>>;
    /**
     * @function GetImageElements
     */
    GetImageElements: (requestData: types.GetImageElementsQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ImageList: {
            AddAt: string;
            StoreUri: string;
        }[];
        Total: number;
    } | undefined>>;
    /**
     * @function GetImageBackgroundColors
     */
    GetImageBackgroundColors: (requestData: Record<string, any>, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Colors: string[];
    } | undefined>>;
    /**
     * @function GetImageStyles
     */
    GetImageStyles: (requestData: types.GetImageStylesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Styles: {
            CreateAt: string;
            Height: number;
            Id: string;
            Name: string;
            ResUri: string;
            Service: string;
            Unit: types.GetImageStylesResUnitEnum;
            UpdateAt: string;
            Width: number;
        }[];
        Total: number;
    } | undefined>>;
    /**
     * @function GetImageStyleDetail
     */
    GetImageStyleDetail: (requestData: types.GetImageStyleDetailQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Style: {
            background: {
                fill: string;
                fillSrc: string;
                viewpoint: {
                    height: number;
                    width: number;
                    x: number;
                    y: number;
                };
            };
            elements: {
                angle: number;
                attr: {
                    adapt?: boolean | undefined;
                    bold?: boolean | undefined;
                    border?: {
                        color: string;
                        dash: number;
                        paddingBottom: number;
                        paddingLeft: number;
                        paddingRight: number;
                        paddingTop: number;
                        radius: number;
                        weight: number;
                    } | undefined;
                    fillptn?: {
                        bgColor?: string | undefined;
                        name: string;
                        param: {
                            color: string;
                        };
                        ptn?: number | undefined;
                        viewLoc?: number | undefined;
                        viewpoint?: {
                            height: number;
                            width: number;
                            x: number;
                            y: number;
                        } | undefined;
                    } | undefined;
                    filter?: string[] | undefined;
                    font?: string | undefined;
                    fontAdapt?: boolean | undefined;
                    fontSize?: number | undefined;
                    lineSpace?: number | undefined;
                    linethrough?: boolean | undefined;
                    oblique?: boolean | undefined;
                    textAlign?: number | undefined;
                    textAlignH?: number | undefined;
                    type: number;
                    underline?: boolean | undefined;
                    viewpoint?: {
                        height: number;
                        width: number;
                        x: number;
                        y: number;
                    } | undefined;
                    wordSpace?: number | undefined;
                    writingMode?: number | undefined;
                };
                content: string;
                flipX: boolean;
                flipY: boolean;
                height: number;
                id: string;
                left: number;
                name: string;
                opacity: number;
                top: number;
                type: string;
                width: number;
            }[];
            height: number;
            id: string;
            name: string;
            output: {
                format: string;
                quality: number;
            };
            service: string;
            unit: string;
            width: number;
        };
    }>>;
    /**
     * @function GetImageStyleResult
     */
    GetImageStyleResult: (requestData: types.GetImageStyleResultQuery & types.GetImageStyleResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        RenderDetail: {
            Element: string;
            ErrMsg: string;
        }[];
        ResUri: string;
    } | undefined>>;
    /**
     * @function DownloadCert
     */
    DownloadCert: (requestData: types.DownloadCertQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ZipData?: string | undefined;
        ZipName?: string | undefined;
    } | undefined>>;
    /**
     * @function GetImageAllDomainCert
     */
    GetImageAllDomainCert: (requestData: Record<string, any>, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CertCommonName: string;
        CertID: string;
        CertName: string;
        CertNotAfter: number;
        Domain: string;
        DomainStatus: string;
        San: string[];
    }[] | undefined>>;
    /**
     * @function GetCertInfo
     */
    GetCertInfo: (requestData: types.GetCertInfoQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CertID: string;
        CertName: string;
        CommonName: string;
        CreateTime: number;
        Issuer: string;
        NotAfter: number;
        San: string[];
    } | undefined>>;
    /**
     * @function GetAllCerts
     */
    GetAllCerts: (requestData: Record<string, any>, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CertID: string;
        CertName: string;
        CommonName: string;
        CreateTime: number;
        Issuer: string;
        NotAfter: number;
        San: string[];
    }[] | undefined>>;
    /**
     * @function CreateImageTemplate
     */
    CreateImageTemplate: (requestData: types.CreateImageTemplateQuery & types.CreateImageTemplateBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        CreateAt: string;
        ServiceId: string;
        TemplateName: string;
        Unsupported: {
            Name: string;
            Param: Record<string, Record<string, unknown>>;
        }[];
    } | undefined>>;
    /**
     * @function DeleteTemplatesFromBin
     */
    DeleteTemplatesFromBin: (requestData: types.DeleteTemplatesFromBinQuery & types.DeleteTemplatesFromBinBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TemplateNames: string[];
    } | undefined>>;
    /**
     * @function DeleteImageTemplate
     */
    DeleteImageTemplate: (requestData: types.DeleteImageTemplateQuery & types.DeleteImageTemplateBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TemplateNames: string[];
    } | undefined>>;
    /**
     * @function CreateImageTemplatesByImport
     */
    CreateImageTemplatesByImport: (requestData: types.CreateImageTemplatesByImportBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ImportResults: {
            ImportedName: string;
            Msg: string;
            Success: boolean;
            TemplateName: string;
        }[];
    } | undefined>>;
    /**
     * @function CreateTemplatesFromBin
     */
    CreateTemplatesFromBin: (requestData: types.CreateTemplatesFromBinQuery & types.CreateTemplatesFromBinBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Results: {
            BinName: string;
            NewName: string;
            Success: boolean;
        }[];
    } | undefined>>;
    /**
     * @function GetImageTemplate
     */
    GetImageTemplate: (requestData: types.GetImageTemplateQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        AdaptiveFmt?: {
            Animated: string;
            Static: string;
        } | undefined;
        Animation?: {
            DemotionType: string;
            Duration: number;
            FramePerSecond: number;
            SecondPerFrame: number;
            SelectFrameMode: string;
            StartTime: number;
            WaitTime: number;
        } | undefined;
        DemotionFormat: string;
        DoUpdate?: boolean | undefined;
        Filters?: {
            Name: string;
            Param: Record<string, unknown>;
        }[] | undefined;
        OuputQuality?: number | undefined;
        OutputExtra?: {
            "heic.alpha.reserve": string;
            "heic.encode.depth": string;
            "heic.roi": string;
            "heic.thumb.ratio": string;
            "jpeg.progressive": string;
            "png.use_quant": string;
        } | undefined;
        OutputFormat: string;
        Parameters?: string[] | undefined;
        QualityMode: string;
        ReqDeadline?: string | undefined;
        ServiceId: string;
        Snapshot?: {
            TimeOffsetMs: string;
            Type: string;
        } | undefined;
        Sync: string;
        TemplateName: string;
        WithSig?: boolean | undefined;
    } | undefined>>;
    /**
     * @function GetTemplatesFromBin
     */
    GetTemplatesFromBin: (requestData: types.GetTemplatesFromBinQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Templates: {
            Abstract: string[];
            AdaptiveFmt: Record<string, unknown>;
            Animation: Record<string, unknown>;
            Content: string;
            CreateAt: string;
            DemotionFormat: string;
            Filters: {
                Name: string;
                Param: Record<string, Record<string, unknown>>;
            }[];
            OuputQuality: number;
            OutputExtra: Record<string, unknown>;
            OutputFormat: string;
            Parameters: string[];
            ReqDeadline: string;
            ServiceID: string;
            Snapshot: Record<string, unknown>;
            Sync: boolean;
            TemplateName: string;
            Usage: string;
            WithSig: boolean;
        }[];
        Total: number;
    } | undefined>>;
    /**
     * @function GetAllImageTemplates
     */
    GetAllImageTemplates: (requestData: types.GetAllImageTemplatesQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        ServiceId: string;
        Templates: {
            Abstract: string[];
            AdaptiveFmt: Record<string, unknown>;
            AnimExtract: Record<string, unknown>;
            Animation: Record<string, unknown>;
            AutoQuality: boolean;
            Content: string;
            CreateAt: string;
            Creator: string;
            DemotionFormat: string;
            Evals: Record<string, unknown>[];
            Exif: Record<string, unknown>;
            Filters: {
                Name: string;
                Param: Record<string, Record<string, unknown>>;
            }[];
            LoopCount: number;
            MaxAge: number;
            OuputQuality: number;
            OutputExtra: Record<string, string>;
            OutputFormat: string;
            OutputVideo: Record<string, unknown>;
            Parameters: string[];
            Persistence: string;
            QualityMode: string;
            QualityStr: string;
            ReqDeadline: string;
            ServiceID: string;
            Snapshot: Record<string, unknown>;
            Sync: boolean;
            TemplateName: string;
            TemplateType: string;
            Timeout: number;
            Updater: string;
            Usage: string;
            WithSig: boolean;
            encrypted: boolean;
        }[];
        Total: number;
    }>>;
    /**
     * @function CreateImageAuditTask
     */
    CreateImageAuditTask: (requestData: types.CreateImageAuditTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        TaskId: string;
    }>>;
    /**
     * @function DeleteImageAuditResult
     */
    DeleteImageAuditResult: (requestData: types.DeleteImageAuditResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function GetSyncAuditResult
     */
    GetSyncAuditResult: (requestData: types.GetSyncAuditResultBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Advice: string;
        DataId: string;
        ImageType: string;
        ImageUri: string;
        Label?: string[] | undefined;
        SubLabel?: string[] | undefined;
    } | undefined>>;
    /**
     * @function UpdateImageAuditTaskStatus
     */
    UpdateImageAuditTaskStatus: (requestData: types.UpdateImageAuditTaskStatusBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function UpdateImageAuditTask
     */
    UpdateImageAuditTask: (requestData: types.UpdateImageAuditTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function UpdateAuditImageStatus
     */
    UpdateAuditImageStatus: (requestData: types.UpdateAuditImageStatusBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<Record<string, unknown>>>;
    /**
     * @function GetImageAuditTasks
     */
    GetImageAuditTasks: (requestData: types.GetImageAuditTasksQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Tasks: {
            AuditTask?: {
                AuditAbility: number;
                AuditDimensions: string[];
                AuditPrefix: string[];
                AuditTextDimensions: string[];
                CallbackDimensions: string[];
                CallbackImageTypes: string[];
                CallbackUrl: string;
                EnableAuditRange: number;
                EnableCallback: boolean;
                EnableFreeze: boolean;
                EnableLargeImageDetect: boolean;
                FailedCount: number;
                FreezeDimensions: string[];
                FreezeStrategy: number;
                FreezeType: string[];
                ImageInfos: {
                    DataId: string;
                    ImageUri: string;
                }[];
                NoAuditPrefix: string[];
                ProcessedNumber: number;
                SuccessCount: number;
            } | undefined;
            CreateAt?: string | undefined;
            Id?: string | undefined;
            ResUri?: string[] | undefined;
            ServiceId?: string | undefined;
            Status?: string | undefined;
            TaskType?: string | undefined;
            Type?: string | undefined;
            UpdateAt: string;
        }[];
        Total: number;
    }>>;
    /**
     * @function GetImageAuditResult
     */
    GetImageAuditResult: (requestData: types.GetImageAuditResultQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        HaveMore: boolean;
        Results: {
            Ability?: number | undefined;
            AuditSuggestion?: string | undefined;
            EndAt?: string | undefined;
            EntryId?: string | undefined;
            ErrMsg?: string | undefined;
            ImageType?: string | undefined;
            ImageUri?: string | undefined;
            Marker?: string | undefined;
            Problems?: string[] | undefined;
            TaskId?: string | undefined;
            Type?: string | undefined;
        }[];
    }>>;
    /**
     * @function GetAuditEntrysCount
     */
    GetAuditEntrysCount: (requestData: types.GetAuditEntrysCountQuery, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        AuditExceptionCount: number;
        AuditFailCount: number;
        AuditNopassCount: number;
        AuditRecheckCount: number;
        AuditSuccessCount: number;
        AuditTotal: number;
        ExceptionCount: number;
        FailedCount: number;
        NopassCount: number;
        RecheckCount: number;
        SuccessCount: number;
        Total: number;
    }>>;
    /**
     * @function CreateImageRetryAuditTask
     */
    CreateImageRetryAuditTask: (requestData: types.CreateImageRetryAuditTaskBody, params?: (import("../../base/types").FetchParams & import("axios").AxiosRequestConfig) | undefined, options?: import("../../base/types").ServiceOptionsBase | undefined) => Promise<import("../../base/types").OpenApiResponse<{
        Result: string;
    }>>;
}
