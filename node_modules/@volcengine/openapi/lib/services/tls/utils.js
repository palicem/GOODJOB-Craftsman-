"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultOption = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
function getDefaultOption() {
    const defaultOptions = {
        host: process.env.VOLCENGINE_ENDPOINT,
        region: process.env.VOLCENGINE_REGION,
        protocol: "https:",
        accessKeyId: process.env.VOLCENGINE_ACCESS_KEY_ID,
        secretKey: process.env.VOLCENGINE_ACCESS_KEY_SECRET,
    };
    try {
        // Read aksk from ~/.volc/config. Priority is lower than environment variables
        if (process.env.HOME && !(defaultOptions.accessKeyId && defaultOptions.secretKey)) {
            const homeConfigPath = path_1.default.resolve(process.env.HOME, ".volc/config");
            if (fs_1.default.existsSync(homeConfigPath)) {
                const configData = JSON.parse(fs_1.default.readFileSync(homeConfigPath, { encoding: "utf-8" }));
                if (!defaultOptions.accessKeyId && configData.VOLCENGINE_ACCESS_KEY_ID) {
                    defaultOptions.accessKeyId = configData.VOLCENGINE_ACCESS_KEY_ID;
                }
                if (!defaultOptions.secretKey && configData.VOLCENGINE_ACCESS_KEY_SECRET) {
                    defaultOptions.secretKey = configData.VOLCENGINE_ACCESS_KEY_SECRET;
                }
                if (!defaultOptions.host && configData.VOLCENGINE_ENDPOINT) {
                    defaultOptions.host = configData.VOLCENGINE_ENDPOINT;
                }
                if (!defaultOptions.region && configData.VOLCENGINE_REGION) {
                    defaultOptions.region = configData.VOLCENGINE_REGION;
                }
            }
        }
    }
    catch (_a) { }
    return defaultOptions;
}
exports.getDefaultOption = getDefaultOption;
//# sourceMappingURL=utils.js.map