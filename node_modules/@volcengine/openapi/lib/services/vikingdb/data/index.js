"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = exports.DataService = void 0;
const abstractService_1 = require("../abstractService");
const types_1 = require("./types");
const types_2 = require("../types");
const pathname_1 = require("./pathname");
class DataService extends abstractService_1.AbstractService {
    async UpsertData(_a) {
        var { Fields, TTL, Async = false } = _a, rest = __rest(_a, ["Fields", "TTL", "Async"]);
        const request = this.isCollectionNameRequest(rest)
            ? {
                collection_name: rest.CollectionName,
                fields: Fields,
                ttl: TTL,
                async: Async,
            }
            : {
                collection_alias: rest.CollectionAlias,
                fields: Fields,
                ttl: TTL,
                async: Async,
            };
        const response = await this.request(pathname_1.Pathname.UpsertData, request);
        return new types_2.VikingdbResponse(response.original_request, response.request_id);
    }
    async DeleteData(request) {
        let data;
        const isDeleteAll = (request) => "DeleteAll" in request;
        if (this.isCollectionNameRequest(request)) {
            if (isDeleteAll(request)) {
                data = {
                    collection_name: request.CollectionName,
                    del_all: request.DeleteAll,
                };
            }
            else {
                data = {
                    collection_name: request.CollectionName,
                    primary_keys: request.PrimaryKeys,
                };
            }
        }
        else {
            if (isDeleteAll(request)) {
                data = {
                    collection_alias: request.CollectionAlias,
                    del_all: request.DeleteAll,
                };
            }
            else {
                data = {
                    collection_alias: request.CollectionAlias,
                    primary_keys: request.PrimaryKeys,
                };
            }
        }
        const response = await this.request(pathname_1.Pathname.DeleteData, data);
        return new types_2.VikingdbResponse(response.original_request, response.request_id);
    }
    async UpdateData(_a) {
        var { Fields, TTL } = _a, rest = __rest(_a, ["Fields", "TTL"]);
        const request = this.isCollectionNameRequest(rest)
            ? {
                collection_name: rest.CollectionName,
                fields: Fields,
                ttl: TTL,
            }
            : {
                collection_alias: rest.CollectionAlias,
                fields: Fields,
                ttl: TTL,
            };
        const response = await this.request(pathname_1.Pathname.UpdateData, request);
        return new types_2.VikingdbResponse(response.original_request, response.request_id);
    }
    async FetchCollectionData(_a) {
        var { PrimaryKeys } = _a, rest = __rest(_a, ["PrimaryKeys"]);
        const request = this.isCollectionNameRequest(rest)
            ? {
                primary_keys: PrimaryKeys,
                collection_name: rest.CollectionName,
            }
            : { primary_keys: PrimaryKeys, collection_alias: rest.CollectionAlias };
        const response = await this.request(pathname_1.Pathname.FetchCollectionData, request);
        return new types_1.FetchCollectionDataResponse(response.data, response.original_request, response.request_id);
    }
    async FetchIndexData(_a) {
        var { IndexName, PrimaryKeys, OutputFields, Partition } = _a, rest = __rest(_a, ["IndexName", "PrimaryKeys", "OutputFields", "Partition"]);
        let request;
        if (this.isCollectionNameRequest(rest)) {
            request = {
                collection_name: rest.CollectionName,
                index_name: IndexName,
                partition: Partition,
                output_fields: OutputFields,
                primary_keys: PrimaryKeys,
            };
        }
        else {
            request = {
                collection_alias: rest.CollectionAlias,
                index_name: IndexName,
                partition: Partition,
                output_fields: OutputFields,
                primary_keys: PrimaryKeys,
            };
        }
        const response = await this.request(pathname_1.Pathname.FetchIndexData, request);
        const data = response.data.map((item) => item.fields).flat();
        return new types_1.FetchIndexDataResponse(data, response.original_request, response.request_id);
    }
}
exports.DataService = DataService;
exports.data = __importStar(require("./types"));
//# sourceMappingURL=index.js.map