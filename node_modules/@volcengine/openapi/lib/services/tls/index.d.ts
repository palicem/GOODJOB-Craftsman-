import Base from "./service";
import { IAlarmNoticeGroupCreateReq, IAlarmNoticeGroupCreateResp, IAlarmNoticeGroupDeleteReq, IAlarmNoticeGroupDeleteResp, IAlarmNoticeGroupDescribeResp, IAlarmNoticeGroupModifyReq, IAlarmNoticeGroupModifyResp, IAlarmPolicyCreateReq, IAlarmPolicyCreateResp, IAlarmPolicyDeleteReq, IAlarmPolicyDeleteResp, IAlarmPolicyDescribeResp, IAlarmPolicyModifyReq, IAlarmPolicyModifyResp, IDescribeAlarmsReq, IDescribeHostGroupReq, IDescribeHostGroupRulesReq, IDescribeHostGroupsReq, IDescribeHostsReq, IDescribeIndexReq, IDescribeNotifyGroupReq, IDescribeProjectReq, IDescribeProjectsReq, IDescribeRuleReq, IDescribeRulesReq, IDescribeShardsReq, IDescribeTopicReq, IDescribeTopicsReq, IEsclientResult, IHostDeleteReq, IHostDeleteResp, IHostDescribeAllResp, IHostGroupCreateReq, IHostGroupCreateResp, IHostGroupDeleteReq, IHostGroupDeleteResp, IHostGroupDescribeAllResp, IHostGroupDescribeHostGroupRulesResp, IHostGroupDescribeResp, IHostGroupModifyReq, IHostGroupModifyResp, IIndexCreateReq, IIndexCreateResp, IIndexDeleteReq, IIndexDeleteResp, IIndexDescribeIndexResp, IIndexModifyReq, IIndexModifyResp, IIndexSearchLogsReq, IProjectCreateReq, IProjectCreateResp, IProjectDeleteReq, IProjectDeleteResp, IProjectDescribeProjectsResp, IProjectDescribeResp, IProjectModifyReq, IProjectModifyResp, IRuleBindRuleReq, IRuleBindRuleResp, IRuleCreateReq, IRuleCreateResp, IRuleDeleteReq, IRuleDeleteResp, IRuleDescribeAllResp, IRuleDescribeResp, IRuleModifyReq, IRuleModifyResp, IRuleUnbindRuleReq, IRuleUnbindRuleResp, IShardDescribeShardsResp, ITopicCreateReq, ITopicCreateResp, ITopicDeleteReq, ITopicDeleteResp, ITopicDescribeResp, ITopicDescribeTopicsResp, ITopicModifyReq, ITopicModifyResp, IDescribeTraceInstanceReq, ITraceInsDescribeResp, IDescribeTraceInstancesReq, ITraceInsDescribeTraceInstancesResp, ITraceInsCreateResp, ITraceInsDeleteResp, ITraceInsModifyResp, TlsServiceOptions, ITraceInsCreateReq, ITraceInsModifyReq, ITraceInsDeleteReq } from "./types";
export declare class TlsService extends Base {
    constructor(options?: TlsServiceOptions);
    DescribeProjects: (requestData: IDescribeProjectsReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IProjectDescribeProjectsResp>;
    DescribeProject: (requestData: IDescribeProjectReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IProjectDescribeResp>;
    CreateProject: (requestData: IProjectCreateReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IProjectCreateResp>;
    ModifyProject: (requestData: IProjectModifyReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IProjectModifyResp>;
    DeleteProject: (requestData: IProjectDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IProjectDeleteResp>;
    DescribeTopics: (requestData: IDescribeTopicsReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITopicDescribeTopicsResp>;
    DescribeTopic: (requestData: IDescribeTopicReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITopicDescribeResp>;
    CreateTopic: (requestData: ITopicCreateReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITopicCreateResp>;
    ModifyTopic: (requestData: ITopicModifyReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITopicModifyResp>;
    DeleteTopic: (requestData: ITopicDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITopicDeleteResp>;
    DescribeIndex: (requestData: IDescribeIndexReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IIndexDescribeIndexResp>;
    CreateIndex: (requestData: IIndexCreateReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IIndexCreateResp>;
    ModifyIndex: (requestData: IIndexModifyReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IIndexModifyResp>;
    DeleteIndex: (requestData: IIndexDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IIndexDeleteResp>;
    DescribeShards: (requestData: IDescribeShardsReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IShardDescribeShardsResp>;
    CreateRule: (requestData: IRuleCreateReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IRuleCreateResp>;
    DeleteRule: (requestData: IRuleDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IRuleDeleteResp>;
    ModifyRule: (requestData: IRuleModifyReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IRuleModifyResp>;
    DescribeRule: (requestData: IDescribeRuleReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IRuleDescribeResp>;
    DescribeRules: (requestData: IDescribeRulesReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IRuleDescribeAllResp>;
    ApplyRuleToHostGroups: (requestData: IRuleBindRuleReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IRuleBindRuleResp>;
    DeleteRuleFromHostGroups: (requestData: IRuleUnbindRuleReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IRuleUnbindRuleResp>;
    CreateHostGroup: (requestData: IHostGroupCreateReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IHostGroupCreateResp>;
    DeleteHostGroup: (requestData: IHostGroupDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IHostGroupDeleteResp>;
    ModifyHostGroup: (requestData: IHostGroupModifyReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IHostGroupModifyResp>;
    DescribeHostGroup: (requestData: IDescribeHostGroupReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IHostGroupDescribeResp>;
    DescribeHostGroups: (requestData: IDescribeHostGroupsReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IHostGroupDescribeAllResp>;
    DescribeHosts: (requestData: IDescribeHostsReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IHostDescribeAllResp>;
    DeleteHost: (requestData: IHostDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IHostDeleteResp>;
    DescribeHostGroupRules: (requestData: IDescribeHostGroupRulesReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IHostGroupDescribeHostGroupRulesResp>;
    CreateAlarm: (requestData: IAlarmPolicyCreateReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IAlarmPolicyCreateResp>;
    DeleteAlarm: (requestData: IAlarmPolicyDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IAlarmPolicyDeleteResp>;
    DescribeAlarms: (requestData: IDescribeAlarmsReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IAlarmPolicyDescribeResp>;
    ModifyAlarm: (requestData: IAlarmPolicyModifyReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IAlarmPolicyModifyResp>;
    CreateAlarmNotifyGroup: (requestData: IAlarmNoticeGroupCreateReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IAlarmNoticeGroupCreateResp>;
    DeleteAlarmNotifyGroup: (requestData: IAlarmNoticeGroupDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IAlarmNoticeGroupDeleteResp>;
    ModifyAlarmNotifyGroup: (requestData: IAlarmNoticeGroupModifyReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IAlarmNoticeGroupModifyResp>;
    DescribeAlarmNotifyGroups: (requestData: IDescribeNotifyGroupReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IAlarmNoticeGroupDescribeResp>;
    PutLogs: (requestData: import("./types").IPutLogsReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<import("./types").IPutLogsResp>;
    SearchLogs: (requestData: IIndexSearchLogsReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<IEsclientResult>;
    DescribeTraceInstances: (requestData: IDescribeTraceInstancesReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITraceInsDescribeTraceInstancesResp>;
    DeleteTraceInstance: (requestData: ITraceInsDeleteReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITraceInsDeleteResp>;
    CreateTraceInstance: (requestData: ITraceInsCreateReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITraceInsCreateResp>;
    ModifyTraceInstance: (requestData: ITraceInsModifyReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITraceInsModifyResp>;
    DescribeTraceInstance: (requestData: IDescribeTraceInstanceReq, config?: import("axios").AxiosRequestConfig | undefined) => Promise<ITraceInsDescribeResp>;
}
export declare const defaultService: TlsService;
