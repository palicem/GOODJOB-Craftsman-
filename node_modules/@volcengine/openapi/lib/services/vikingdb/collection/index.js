"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collection = exports.CollectionService = void 0;
const abstractService_1 = require("../abstractService");
const types_1 = require("./types");
const pathname_1 = require("./pathname");
const types_2 = require("../types");
class CollectionService extends abstractService_1.AbstractService {
    isScalarField(field) {
        return (new Set([
            types_2.FieldType.Int64,
            types_2.FieldType.Float32,
            types_2.FieldType.String,
            types_2.FieldType.Boolean,
            types_2.FieldType.ListInt64,
            types_2.FieldType.ListString,
        ]).has(field.FieldType) &&
            (!("IsPrimary" in field) || !field.IsPrimary));
    }
    isDenseVectorField(field) {
        return field.FieldType === types_2.FieldType.DenseVector;
    }
    isTextField(field) {
        return field.FieldType === types_2.FieldType.Text;
    }
    encodeCollectionFields(fields) {
        return fields.map((item) => {
            const field = {
                field_name: item.FieldName,
                field_type: item.FieldType,
            };
            if (this.isScalarField(item)) {
                field.default_val = item.DefaultValue;
            }
            else if (this.isDenseVectorField(item)) {
                field.dim = item.Dim;
            }
            else if (this.isTextField(item)) {
                field.pipeline_name = item.PipelineName;
            }
            return field;
        }, this);
    }
    getPrimaryKey(fields) {
        const primaryFields = fields.filter((item) => "IsPrimary" in item && item.IsPrimary);
        if (!primaryFields.length) {
            return "__AUTO_ID__";
        }
        const [{ FieldName }] = primaryFields;
        return FieldName;
    }
    async CreateCollection({ CollectionAliases, CollectionName, Description, Fields, Vectorize, }) {
        const primaryKey = this.getPrimaryKey(Fields);
        let VectorizeParams = [];
        if (Vectorize) {
            if (Array.isArray(Vectorize)) {
                VectorizeParams = Vectorize;
            }
            else {
                VectorizeParams = [Vectorize];
            }
        }
        const response = await this.request(pathname_1.Pathname.CreateCollection, Object.assign({ collection_name: CollectionName, collection_aliases: CollectionAliases, description: Description, primary_key: primaryKey, fields: this.encodeCollectionFields(Fields) }, (VectorizeParams.length > 0 ? { vectorize: VectorizeParams } : {})));
        return new types_2.VikingdbResponse(response.original_request, response.request_id);
    }
    async UpdateCollection({ CollectionName, Fields, CollectionAliases, Description, }) {
        const response = await this.request(pathname_1.Pathname.UpdateCollection, {
            collection_name: CollectionName,
            collection_aliases: CollectionAliases,
            fields: this.encodeCollectionFields(Fields),
            description: Description,
        });
        return new types_2.VikingdbResponse(response.original_request, response.request_id);
    }
    decodeCollectionInfo(data) {
        var _a;
        const primaryKeys = new Set(this.isString(data.primary_key) ? [data.primary_key] : data.primary_key);
        return {
            CollectionName: data.collection_name,
            CollectionAliases: data.collection_aliases,
            Description: data.description,
            CreateTime: data.create_time,
            IndexNames: (_a = data.index_names) !== null && _a !== void 0 ? _a : [],
            IndexNumber: data.index_num,
            UpdatePerson: data.update_person,
            UpdateTime: data.update_time,
            Stat: { DataNumber: data.stat.data_number },
            Fields: data.fields.map((item) => {
                if (primaryKeys.has(item.field_name)) {
                    const field = {
                        FieldName: item.field_name,
                        IsPrimary: true,
                        FieldType: item.field_type,
                    };
                    return field;
                }
                if (!this.isNil(item.default_val)) {
                    const field = {
                        FieldName: item.field_name,
                        FieldType: item.field_type,
                        DefaultValue: item.default_val,
                    };
                    return field;
                }
                if (!this.isNil(item.pipeline_name)) {
                    const field = {
                        FieldName: item.field_name,
                        FieldType: item.field_type,
                        PipelineName: item.pipeline_name,
                    };
                    return field;
                }
                if (!this.isNil(item.dim)) {
                    const field = {
                        FieldName: item.field_name,
                        FieldType: item.field_type,
                        Dim: item.dim,
                    };
                    return field;
                }
                return {
                    FieldName: item.field_name,
                    FieldType: item.field_type,
                };
            }, this),
        };
    }
    async GetCollectionInfo(request) {
        let response;
        if ("CollectionName" in request) {
            response = await this.request(pathname_1.Pathname.GetCollectionInfo, {
                collection_name: request.CollectionName,
            });
        }
        else {
            response = await this.request(pathname_1.Pathname.GetCollectionInfo, {
                collection_alias: request.CollectionAlias,
            });
        }
        const { data, original_request, request_id } = response;
        const info = this.decodeCollectionInfo(data);
        return new types_1.GetCollectionInfoResponse(info, original_request, request_id);
    }
    async ListCollections() {
        const response = await this.request(pathname_1.Pathname.ListCollections);
        const data = response.data.map(this.decodeCollectionInfo, this);
        return new types_1.ListCollectionsResponse(data, response.original_request, response.request_id);
    }
    async DropCollection(request) {
        const response = await this.request(pathname_1.Pathname.DropCollection, this.isCollectionNameRequest(request)
            ? {
                collection_name: request.CollectionName,
            }
            : { collection_alias: request.CollectionAlias });
        return new types_2.VikingdbResponse(response.original_request, response.request_id);
    }
}
exports.CollectionService = CollectionService;
exports.collection = __importStar(require("./types"));
//# sourceMappingURL=index.js.map