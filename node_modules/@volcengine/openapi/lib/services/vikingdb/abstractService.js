"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractService = void 0;
const types_1 = require("./types");
const sign_1 = __importDefault(require("../../base/sign"));
const axios_1 = __importDefault(require("axios"));
class AbstractService {
    get basename() {
        return this.region2Url[this.region];
    }
    constructor(ak, sk, region, sessionToken) {
        this.ak = ak;
        this.sk = sk;
        this.region = region;
        this.sessionToken = sessionToken;
        this.region2Url = {
            "cn-beijing": "https://api-vikingdb.volces.com",
            "cn-shanghai": "https://api-vikingdb.mlp.cn-shanghai.volces.com",
        };
    }
    sign(pathname, body, headers) {
        const requestObj = {
            region: this.region,
            headers: Object.assign({ Accept: "application/json", "Content-Type": "application/json" }, headers),
            method: "POST",
            pathname,
            body,
        };
        const signer = new sign_1.default(requestObj, "air");
        signer.addAuthorization({
            accessKeyId: this.ak,
            secretKey: this.sk,
            sessionToken: this.sessionToken,
        });
        return requestObj.headers;
    }
    async request(pathname, data = {}, _a = {
        timeout: 30 * 1000,
    }) {
        var { timeout = 30 * 1000 } = _a, rest = __rest(_a, ["timeout"]);
        const body = this.encode(data);
        const headers = this.sign(pathname, body, rest.headers);
        try {
            const response = await (0, axios_1.default)({
                baseURL: this.basename,
                url: pathname,
                method: "POST",
                timeout,
                headers,
                data: body,
            });
            const result = response.data;
            return Object.assign(Object.assign({}, result), { original_request: body });
        }
        catch (e) {
            const error = e;
            if (error.isAxiosError && error.response) {
                const result = error.response.data;
                // 业务错误
                throw new types_1.VikingdbRequestError(result.code, result.message, body, result.request_id);
            }
            throw new types_1.VikingdbError(types_1.VikingdbErrorCode.ErrSdk, error.message);
        }
    }
    encode(value) {
        return JSON.stringify(value);
    }
    decode(input) {
        return JSON.parse(input);
    }
    isString(value) {
        return typeof value === "string";
    }
    isNil(value) {
        return value == null;
    }
    isCollectionNameRequest(request) {
        return "CollectionName" in request;
    }
}
exports.AbstractService = AbstractService;
//# sourceMappingURL=abstractService.js.map