import { AbstractService } from "../abstractService";
import { SearchAggRequest, type SearchByPrimaryKeyRequest, type SearchByScalarRequest, type SearchByTextRequest, type SearchByVectorRequest, SearchResponse } from "./types";
import { VikingdbResponse } from "../types";
export declare class SearchService extends AbstractService {
    private encodeSearchRequest;
    private encodeMustTypeFilter;
    private encodeRangeTypeFilter;
    private encodeGeographicalRangeTypeFilter;
    private encodeLogicTypeFilter;
    private encodeFilter;
    private decodeSearchData;
    SearchByVector<Data extends Record<string, unknown>>({ IndexName, DenseWeight, Filter, Limit, OutputFields, Partition, DenseVectors, SparseVectors, PrimaryKeyIn, PrimaryKeyNotIn, ...rest }: SearchByVectorRequest): Promise<SearchResponse<Data>>;
    SearchByPrimaryKeys<Data extends Record<string, unknown>>({ IndexName, DenseWeight, Filter, Limit, Partition, OutputFields, PrimaryKeys, ...rest }: SearchByPrimaryKeyRequest): Promise<SearchResponse<Data>>;
    SearchByText<Data extends Record<string, unknown>>({ DenseWeight, Filter, IndexName, Limit, OutputFields, Partition, Text, ...rest }: SearchByTextRequest): Promise<SearchResponse<Data>>;
    SearchByScalar<Data extends Record<string, unknown>>({ Filter, Partition, OutputFields, Limit, IndexName, ScalarConfig, ...rest }: SearchByScalarRequest): Promise<SearchResponse<Data>>;
    SearchAgg({ IndexName, Search, Agg, ...rest }: SearchAggRequest): Promise<VikingdbResponse>;
}
export * as search from "./types";
